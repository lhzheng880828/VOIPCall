package com.jcraft.jzlib;

import org.jitsi.javax.sip.message.Response;

final class InfTree {
    static final int BMAX = 15;
    private static final int MANY = 1440;
    private static final int Z_BUF_ERROR = -5;
    private static final int Z_DATA_ERROR = -3;
    private static final int Z_ERRNO = -1;
    private static final int Z_MEM_ERROR = -4;
    private static final int Z_NEED_DICT = 2;
    private static final int Z_OK = 0;
    private static final int Z_STREAM_END = 1;
    private static final int Z_STREAM_ERROR = -2;
    private static final int Z_VERSION_ERROR = -6;
    static final int[] cpdext = new int[]{0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13};
    static final int[] cpdist = new int[]{1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, Response.MESSAGE_TOO_LARGE, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577};
    static final int[] cplens = new int[]{3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
    static final int[] cplext = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112};
    static final int fixed_bd = 5;
    static final int fixed_bl = 9;
    static final int[] fixed_td = new int[]{80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, Response.MESSAGE_TOO_LARGE, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577};
    static final int[] fixed_tl = new int[]{96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, Response.OK, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, Response.RINGING, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, Response.ACCEPTED, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, Response.QUEUED, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, Response.CALL_IS_BEING_FORWARDED, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, Response.SESSION_PROGRESS, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255};
    int[] c = null;
    int[] hn = null;
    int[] r = null;
    int[] u = null;
    int[] v = null;
    int[] x = null;

    InfTree() {
    }

    /* JADX WARNING: Missing block: B:91:0x02e4, code skipped:
            r12 = r12 + 1;
            r15 = r16;
     */
    private int huft_build(int[] r27, int r28, int r29, int r30, int[] r31, int[] r32, int[] r33, int[] r34, int[] r35, int[] r36, int[] r37) {
        /*
        r26 = this;
        r15 = 0;
        r10 = r29;
    L_0x0003:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r23 = r28 + r15;
        r23 = r27[r23];
        r24 = r22[r23];
        r24 = r24 + 1;
        r22[r23] = r24;
        r15 = r15 + 1;
        r10 = r10 + -1;
        if (r10 != 0) goto L_0x0003;
    L_0x0019:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r23 = 0;
        r22 = r22[r23];
        r0 = r22;
        r1 = r29;
        if (r0 != r1) goto L_0x0038;
    L_0x0029:
        r22 = 0;
        r23 = -1;
        r33[r22] = r23;
        r22 = 0;
        r23 = 0;
        r34[r22] = r23;
        r22 = 0;
    L_0x0037:
        return r22;
    L_0x0038:
        r22 = 0;
        r13 = r34[r22];
        r11 = 1;
    L_0x003d:
        r22 = 15;
        r0 = r22;
        if (r11 > r0) goto L_0x004d;
    L_0x0043:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r22 = r22[r11];
        if (r22 == 0) goto L_0x007c;
    L_0x004d:
        r12 = r11;
        if (r13 >= r11) goto L_0x0051;
    L_0x0050:
        r13 = r11;
    L_0x0051:
        r10 = 15;
    L_0x0053:
        if (r10 == 0) goto L_0x005f;
    L_0x0055:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r22 = r22[r10];
        if (r22 == 0) goto L_0x007f;
    L_0x005f:
        r8 = r10;
        if (r13 <= r10) goto L_0x0063;
    L_0x0062:
        r13 = r10;
    L_0x0063:
        r22 = 0;
        r34[r22] = r13;
        r22 = 1;
        r20 = r22 << r11;
    L_0x006b:
        if (r11 >= r10) goto L_0x0087;
    L_0x006d:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r22 = r22[r11];
        r20 = r20 - r22;
        if (r20 >= 0) goto L_0x0082;
    L_0x0079:
        r22 = -3;
        goto L_0x0037;
    L_0x007c:
        r11 = r11 + 1;
        goto L_0x003d;
    L_0x007f:
        r10 = r10 + -1;
        goto L_0x0053;
    L_0x0082:
        r11 = r11 + 1;
        r20 = r20 << 1;
        goto L_0x006b;
    L_0x0087:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r22 = r22[r10];
        r20 = r20 - r22;
        if (r20 >= 0) goto L_0x0096;
    L_0x0093:
        r22 = -3;
        goto L_0x0037;
    L_0x0096:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r23 = r22[r10];
        r23 = r23 + r20;
        r22[r10] = r23;
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r23 = 1;
        r11 = 0;
        r22[r23] = r11;
        r15 = 1;
        r19 = 2;
    L_0x00b0:
        r10 = r10 + -1;
        if (r10 == 0) goto L_0x00cb;
    L_0x00b4:
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r0 = r26;
        r0 = r0.c;
        r23 = r0;
        r23 = r23[r15];
        r11 = r11 + r23;
        r22[r19] = r11;
        r19 = r19 + 1;
        r15 = r15 + 1;
        goto L_0x00b0;
    L_0x00cb:
        r10 = 0;
        r15 = 0;
    L_0x00cd:
        r22 = r28 + r15;
        r11 = r27[r22];
        if (r11 == 0) goto L_0x00e1;
    L_0x00d3:
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r23 = r22[r11];
        r24 = r23 + 1;
        r22[r11] = r24;
        r37[r23] = r10;
    L_0x00e1:
        r15 = r15 + 1;
        r10 = r10 + 1;
        r0 = r29;
        if (r10 < r0) goto L_0x00cd;
    L_0x00e9:
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r29 = r22[r8];
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r23 = 0;
        r10 = 0;
        r22[r23] = r10;
        r15 = 0;
        r9 = -1;
        r0 = -r13;
        r18 = r0;
        r0 = r26;
        r0 = r0.u;
        r22 = r0;
        r23 = 0;
        r24 = 0;
        r22[r23] = r24;
        r17 = 0;
        r21 = 0;
    L_0x0111:
        if (r12 > r8) goto L_0x02ea;
    L_0x0113:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r5 = r22[r12];
        r6 = r5;
        r16 = r15;
    L_0x011e:
        r5 = r6 + -1;
        if (r6 == 0) goto L_0x02e4;
    L_0x0122:
        r22 = r18 + r13;
        r0 = r22;
        if (r12 <= r0) goto L_0x0204;
    L_0x0128:
        r9 = r9 + 1;
        r18 = r18 + r13;
        r21 = r8 - r18;
        r0 = r21;
        if (r0 <= r13) goto L_0x0134;
    L_0x0132:
        r21 = r13;
    L_0x0134:
        r22 = 1;
        r11 = r12 - r18;
        r7 = r22 << r11;
        r22 = r5 + 1;
        r0 = r22;
        if (r7 <= r0) goto L_0x0160;
    L_0x0140:
        r22 = r5 + 1;
        r7 = r7 - r22;
        r19 = r12;
        r0 = r21;
        if (r11 >= r0) goto L_0x0160;
    L_0x014a:
        r11 = r11 + 1;
        r0 = r21;
        if (r11 >= r0) goto L_0x0160;
    L_0x0150:
        r7 = r7 << 1;
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r19 = r19 + 1;
        r22 = r22[r19];
        r0 = r22;
        if (r7 > r0) goto L_0x0178;
    L_0x0160:
        r22 = 1;
        r21 = r22 << r11;
        r22 = 0;
        r22 = r36[r22];
        r22 = r22 + r21;
        r23 = 1440; // 0x5a0 float:2.018E-42 double:7.115E-321;
        r0 = r22;
        r1 = r23;
        if (r0 <= r1) goto L_0x0183;
    L_0x0172:
        r22 = -3;
        r15 = r16;
        goto L_0x0037;
    L_0x0178:
        r0 = r26;
        r0 = r0.c;
        r22 = r0;
        r22 = r22[r19];
        r7 = r7 - r22;
        goto L_0x014a;
    L_0x0183:
        r0 = r26;
        r0 = r0.u;
        r22 = r0;
        r23 = 0;
        r17 = r36[r23];
        r22[r9] = r17;
        r22 = 0;
        r23 = r36[r22];
        r23 = r23 + r21;
        r36[r22] = r23;
        if (r9 == 0) goto L_0x01fe;
    L_0x0199:
        r0 = r26;
        r0 = r0.x;
        r22 = r0;
        r22[r9] = r10;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 0;
        r0 = (byte) r11;
        r24 = r0;
        r22[r23] = r24;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 1;
        r0 = (byte) r13;
        r24 = r0;
        r22[r23] = r24;
        r22 = r18 - r13;
        r11 = r10 >>> r22;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 2;
        r0 = r26;
        r0 = r0.u;
        r24 = r0;
        r25 = r9 + -1;
        r24 = r24[r25];
        r24 = r17 - r24;
        r24 = r24 - r11;
        r22[r23] = r24;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 0;
        r0 = r26;
        r0 = r0.u;
        r24 = r0;
        r25 = r9 + -1;
        r24 = r24[r25];
        r24 = r24 + r11;
        r24 = r24 * 3;
        r25 = 3;
        r0 = r22;
        r1 = r23;
        r2 = r35;
        r3 = r24;
        r4 = r25;
        java.lang.System.arraycopy(r0, r1, r2, r3, r4);
        goto L_0x0122;
    L_0x01fe:
        r22 = 0;
        r33[r22] = r17;
        goto L_0x0122;
    L_0x0204:
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 1;
        r24 = r12 - r18;
        r0 = r24;
        r0 = (byte) r0;
        r24 = r0;
        r22[r23] = r24;
        r0 = r16;
        r1 = r29;
        if (r0 < r1) goto L_0x0252;
    L_0x021b:
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 0;
        r24 = 192; // 0xc0 float:2.69E-43 double:9.5E-322;
        r22[r23] = r24;
        r15 = r16;
    L_0x0229:
        r22 = 1;
        r23 = r12 - r18;
        r7 = r22 << r23;
        r11 = r10 >>> r18;
    L_0x0231:
        r0 = r21;
        if (r11 >= r0) goto L_0x02b4;
    L_0x0235:
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 0;
        r24 = r17 + r11;
        r24 = r24 * 3;
        r25 = 3;
        r0 = r22;
        r1 = r23;
        r2 = r35;
        r3 = r24;
        r4 = r25;
        java.lang.System.arraycopy(r0, r1, r2, r3, r4);
        r11 = r11 + r7;
        goto L_0x0231;
    L_0x0252:
        r22 = r37[r16];
        r0 = r22;
        r1 = r30;
        if (r0 >= r1) goto L_0x0287;
    L_0x025a:
        r0 = r26;
        r0 = r0.r;
        r23 = r0;
        r24 = 0;
        r22 = r37[r16];
        r25 = 256; // 0x100 float:3.59E-43 double:1.265E-321;
        r0 = r22;
        r1 = r25;
        if (r0 >= r1) goto L_0x0284;
    L_0x026c:
        r22 = 0;
    L_0x026e:
        r0 = r22;
        r0 = (byte) r0;
        r22 = r0;
        r23[r24] = r22;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 2;
        r15 = r16 + 1;
        r24 = r37[r16];
        r22[r23] = r24;
        goto L_0x0229;
    L_0x0284:
        r22 = 96;
        goto L_0x026e;
    L_0x0287:
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 0;
        r24 = r37[r16];
        r24 = r24 - r30;
        r24 = r32[r24];
        r24 = r24 + 16;
        r24 = r24 + 64;
        r0 = r24;
        r0 = (byte) r0;
        r24 = r0;
        r22[r23] = r24;
        r0 = r26;
        r0 = r0.r;
        r22 = r0;
        r23 = 2;
        r15 = r16 + 1;
        r24 = r37[r16];
        r24 = r24 - r30;
        r24 = r31[r24];
        r22[r23] = r24;
        goto L_0x0229;
    L_0x02b4:
        r22 = 1;
        r23 = r12 + -1;
        r11 = r22 << r23;
    L_0x02ba:
        r22 = r10 & r11;
        if (r22 == 0) goto L_0x02c2;
    L_0x02be:
        r10 = r10 ^ r11;
        r11 = r11 >>> 1;
        goto L_0x02ba;
    L_0x02c2:
        r10 = r10 ^ r11;
        r22 = 1;
        r22 = r22 << r18;
        r14 = r22 + -1;
    L_0x02c9:
        r22 = r10 & r14;
        r0 = r26;
        r0 = r0.x;
        r23 = r0;
        r23 = r23[r9];
        r0 = r22;
        r1 = r23;
        if (r0 == r1) goto L_0x02fa;
    L_0x02d9:
        r9 = r9 + -1;
        r18 = r18 - r13;
        r22 = 1;
        r22 = r22 << r18;
        r14 = r22 + -1;
        goto L_0x02c9;
    L_0x02e4:
        r12 = r12 + 1;
        r15 = r16;
        goto L_0x0111;
    L_0x02ea:
        if (r20 == 0) goto L_0x02f6;
    L_0x02ec:
        r22 = 1;
        r0 = r22;
        if (r8 == r0) goto L_0x02f6;
    L_0x02f2:
        r22 = -5;
        goto L_0x0037;
    L_0x02f6:
        r22 = 0;
        goto L_0x0037;
    L_0x02fa:
        r6 = r5;
        r16 = r15;
        goto L_0x011e;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.jcraft.jzlib.InfTree.huft_build(int[], int, int, int, int[], int[], int[], int[], int[], int[], int[]):int");
    }

    /* access modifiers changed from: 0000 */
    public int inflate_trees_bits(int[] c, int[] bb, int[] tb, int[] hp, ZStream z) {
        initWorkArea(19);
        this.hn[0] = 0;
        int result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);
        if (result == -3) {
            z.msg = "oversubscribed dynamic bit lengths tree";
            return result;
        } else if (result != -5 && bb[0] != 0) {
            return result;
        } else {
            z.msg = "incomplete dynamic bit lengths tree";
            return -3;
        }
    }

    /* access modifiers changed from: 0000 */
    public int inflate_trees_dynamic(int nl, int nd, int[] c, int[] bl, int[] bd, int[] tl, int[] td, int[] hp, ZStream z) {
        initWorkArea(288);
        this.hn[0] = 0;
        int result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);
        if (result != 0 || bl[0] == 0) {
            if (result == -3) {
                z.msg = "oversubscribed literal/length tree";
            } else if (result != -4) {
                z.msg = "incomplete literal/length tree";
                result = -3;
            }
            return result;
        }
        initWorkArea(288);
        result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);
        if (result == 0 && (bd[0] != 0 || nl <= 257)) {
            return 0;
        }
        if (result == -3) {
            z.msg = "oversubscribed distance tree";
        } else if (result == -5) {
            z.msg = "incomplete distance tree";
            result = -3;
        } else if (result != -4) {
            z.msg = "empty distance tree with lengths";
            result = -3;
        }
        return result;
    }

    static int inflate_trees_fixed(int[] bl, int[] bd, int[][] tl, int[][] td, ZStream z) {
        bl[0] = 9;
        bd[0] = 5;
        tl[0] = fixed_tl;
        td[0] = fixed_td;
        return 0;
    }

    private void initWorkArea(int vsize) {
        int i;
        if (this.hn == null) {
            this.hn = new int[1];
            this.v = new int[vsize];
            this.c = new int[16];
            this.r = new int[3];
            this.u = new int[15];
            this.x = new int[16];
        }
        if (this.v.length < vsize) {
            this.v = new int[vsize];
        }
        for (i = 0; i < vsize; i++) {
            this.v[i] = 0;
        }
        for (i = 0; i < 16; i++) {
            this.c[i] = 0;
        }
        for (i = 0; i < 3; i++) {
            this.r[i] = 0;
        }
        System.arraycopy(this.c, 0, this.u, 0, 15);
        System.arraycopy(this.c, 0, this.x, 0, 16);
    }
}
