2020-09-19 12:57:54.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:03.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:03.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:03.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:06.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:06.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:06.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:06.992 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:06.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:06.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:19.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:19.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:19.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:28.909 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:28.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:28.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:31.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:31.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:31.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:31.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:31.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:31.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:39.458 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 12:58:39.459 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:39.460 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:39.461 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 12:58:39.462 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 12:58:39.463 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 12:58:39.465 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 12:58:39.467 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 12:58:39.468 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 12:58:39.469 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:39.470 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:39.471 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 12:58:39.472 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 12:58:39.473 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 12:58:39.475 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 12:58:39.478 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 12:58:39.480 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 290 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=c34d616c
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 12:58:39.491 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 12:58:39.492 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 12:58:39.493 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 12:58:44.492 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 12:58:44.493 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 12:58:44.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:44.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:44.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:53.909 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:53.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:53.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:56.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:56.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:56.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:58:56.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:58:56.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:58:56.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:09.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:09.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:09.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:18.909 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:18.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:18.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:21.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:21.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:21.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:21.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:21.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:21.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:34.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:34.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:34.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:43.909 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:43.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:43.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:46.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:46.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:46.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:46.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:46.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:46.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 12:59:59.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 12:59:59.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 12:59:59.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:08.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:08.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:08.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:11.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:11.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:11.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:11.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:11.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:11.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:24.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:24.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:24.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:33.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:33.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:33.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:36.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:36.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:36.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:36.993 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:36.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:36.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:49.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:49.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:49.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:00:58.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:00:58.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:00:58.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:01.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:01.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:01.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:01.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:01.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:01.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:14.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:14.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:14.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:23.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:23.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:23.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:26.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:26.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:26.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:26.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:26.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:26.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:39.879 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:39.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:39.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:48.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:48.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:48.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:51.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.759 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:01:51.760 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.761 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.762 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:01:51.763 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:01:51.764 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:01:51.766 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:01:51.767 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:01:51.768 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:01:51.769 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.770 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.771 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:01:51.772 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:01:51.773 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:01:51.775 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:01:51.776 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:01:51.778 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 330 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=7f8ca20f
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:01:51.788 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:01:51.789 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:01:51.790 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:01:51.798 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:01:51.799 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.800 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.801 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:01:51.802 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:01:51.803 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:01:51.805 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:01:51.806 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:01:51.807 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:01:51.808 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.809 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:51.810 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:01:51.811 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:01:51.812 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:01:51.814 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:01:51.815 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:01:51.816 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 330 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=e6ee25d2
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:01:51.830 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:01:51.831 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:01:51.832 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:01:51.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:01:51.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:01:51.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:01:56.788 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:01:56.789 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:01:56.830 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:01:56.831 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:02:04.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:04.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:04.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:13.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:13.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:13.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:16.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:16.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:16.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:16.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:16.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:16.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:29.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:29.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:29.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:38.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:38.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:38.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:41.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:41.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:41.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:41.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:41.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:41.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:02:54.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:02:54.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:02:54.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:03.910 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:03.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:03.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:06.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:06.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:06.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:06.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:06.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:06.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:19.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:19.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:19.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:28.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:28.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:28.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:31.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:31.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:31.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:31.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:31.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:31.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:44.880 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:44.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:44.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:53.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:53.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:53.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:56.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:56.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:56.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:03:56.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:03:56.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:03:56.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:09.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:09.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:09.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:18.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:18.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:18.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:21.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:21.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:21.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:21.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:21.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:21.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:34.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:34.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:34.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:43.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:43.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:43.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:46.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:46.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:46.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:46.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:46.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:46.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:47.232 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:04:47.233 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:47.234 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:47.235 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:04:47.236 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:04:47.236 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:04:47.238 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:04:47.240 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:04:47.241 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:04:47.242 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:47.242 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:04:47.243 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:04:47.244 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:04:47.246 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:04:47.248 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:04:47.249 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:04:47.250 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 659 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=39049cef
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="7a+kVyMpWfAUybvUm4rJ2g==",uri="sip:ims.ge.chinamobile.com",response="a24e9d00b3e16e9ba06b18ad681090a7",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:04:47.414 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:04:47.415 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:04:47.416 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:04:47.417 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:04:47.428 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:04:47.429 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, RG6tuZEBD7uaqoTYPuRlSg==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:04:47.431 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="RG6tuZEBD7uaqoTYPuRlSg==",uri="sip:ims.ge.chinamobile.com",response="a0224ac8f3bd844ca61eaa2f9af4386e",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:04:47.432 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:04:47.583 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:04:47.583 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:04:47.584 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:04:52.415 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:04:52.416 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:04:52.582 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:04:52.583 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:04:59.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:04:59.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:04:59.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:08.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:08.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:08.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:11.557 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:11.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:11.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:11.994 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:11.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:11.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:24.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:24.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:24.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:33.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:33.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:33.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:36.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:36.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:36.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:36.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:36.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:36.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:49.881 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:49.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:49.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:05:58.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:05:58.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:05:58.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:01.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:01.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:01.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:01.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:01.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:01.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:14.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:14.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:14.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:23.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:23.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:23.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:26.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:26.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:26.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:26.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:26.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:26.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:39.882 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:39.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:39.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:48.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:48.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:48.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:51.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:51.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:51.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:06:51.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:06:51.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:06:51.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:04.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:04.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:04.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:13.911 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:13.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:13.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:16.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:16.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:16.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:16.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:16.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:16.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:29.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:29.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:29.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:38.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:38.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:38.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:39.496 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:07:39.497 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:39.498 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:39.499 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:07:39.500 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:07:39.501 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:07:39.503 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:07:39.504 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:07:39.505 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:07:39.506 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:39.507 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:39.508 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:07:39.509 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:07:39.510 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:07:39.512 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:07:39.513 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:07:39.515 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 291 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=69cfd864
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:07:39.525 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:07:39.526 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:07:39.527 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:07:41.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:41.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:41.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:41.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:41.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:41.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:07:44.526 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:07:44.527 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:07:54.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:07:54.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:07:54.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:03.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:03.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:03.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:06.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:06.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:06.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:06.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:06.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:06.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:19.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:19.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:19.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:28.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:28.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:28.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:31.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:31.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:31.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:31.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:31.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:31.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:44.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:44.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:44.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:53.912 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:53.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:53.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:56.558 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:56.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:56.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:08:56.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:08:56.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:08:56.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:09.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:09.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:09.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:18.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:18.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:18.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:21.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:21.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:21.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:21.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:21.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:21.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:34.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:34.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:34.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:43.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:43.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:43.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:46.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:46.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:46.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:46.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:46.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:46.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:09:59.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:09:59.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:09:59.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:08.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:08.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:08.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:11.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:11.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:11.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:11.995 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:11.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:11.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:24.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:24.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:24.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:33.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:33.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:33.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:36.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:36.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:36.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:36.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:36.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:36.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:49.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:49.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:49.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:51.793 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:10:51.794 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:51.795 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:51.796 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:10:51.797 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:10:51.798 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:10:51.800 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:10:51.801 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:10:51.802 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:10:51.803 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:51.804 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:51.805 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:10:51.806 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:10:51.807 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:10:51.809 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:10:51.810 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:10:51.811 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 331 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=1f7ca216
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:10:51.822 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:10:51.822 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:10:51.823 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:10:51.835 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:10:51.836 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:51.837 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:51.838 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:10:51.839 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:10:51.840 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:10:51.842 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:10:51.843 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:10:51.844 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:10:51.845 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:51.846 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:10:51.847 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:10:51.848 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:10:51.849 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:10:51.851 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:10:51.852 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:10:51.853 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 331 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=f8f7753
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:10:51.864 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:10:51.865 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:10:51.865 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:10:56.822 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:10:56.823 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:10:56.863 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:10:56.864 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:10:58.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:10:58.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:10:58.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:01.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:01.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:01.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:01.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:01.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:01.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:14.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:14.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:14.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:23.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:23.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:23.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:26.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:26.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:26.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:26.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:26.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:26.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:39.883 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:39.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:39.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:48.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:48.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:48.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:51.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:51.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:51.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:11:51.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:11:51.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:11:51.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:04.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:04.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:04.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:13.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:13.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:13.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:16.559 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:16.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:16.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:16.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:16.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:16.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:29.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:29.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:29.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:38.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:38.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:38.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:41.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:41.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:41.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:41.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:41.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:41.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:12:54.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:12:54.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:12:54.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:03.913 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:03.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:03.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:06.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:06.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:06.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:06.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:06.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:06.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:19.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:19.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:19.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:28.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:28.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:28.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:31.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:31.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:31.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:31.996 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:31.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:31.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:44.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:44.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:44.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:47.588 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:13:47.589 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:47.590 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:47.590 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:13:47.591 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:13:47.592 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:13:47.594 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:13:47.595 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:13:47.596 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:13:47.597 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:47.598 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:47.599 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:13:47.600 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:13:47.601 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:13:47.603 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:13:47.604 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:13:47.606 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 661 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=c91f54d0
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="RG6tuZEBD7uaqoTYPuRlSg==",uri="sip:ims.ge.chinamobile.com",response="a0224ac8f3bd844ca61eaa2f9af4386e",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:13:47.790 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:13:47.791 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:13:47.792 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:13:47.793 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:13:47.804 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:13:47.805 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, 6W8enWZQSZHQxkvNhKG/jQ==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:13:47.807 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="6W8enWZQSZHQxkvNhKG/jQ==",uri="sip:ims.ge.chinamobile.com",response="3c9965651d30e5c880a497f1e640d01d",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:13:47.808 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:13:47.958 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:13:47.959 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:13:47.960 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:13:52.790 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:13:52.791 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:13:52.959 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:13:52.960 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:13:53.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:53.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:53.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:56.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:56.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:56.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:13:56.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:13:56.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:13:56.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:09.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:09.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:09.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:18.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:18.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:18.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:21.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:21.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:21.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:21.997 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:21.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:21.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:34.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:34.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:34.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:43.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:43.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:43.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:46.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:46.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:46.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:46.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:46.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:46.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:14:59.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:14:59.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:14:59.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:08.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:08.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:08.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:11.560 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:11.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:11.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:11.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:11.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:12.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:24.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:24.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:24.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:33.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:33.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:33.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:36.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:36.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:36.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:36.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:36.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:37.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:49.884 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:49.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:49.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:15:58.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:15:58.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:15:58.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:01.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:01.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:01.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:01.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:01.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:02.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:14.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:14.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:14.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:23.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:23.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:23.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:26.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:26.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:26.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:26.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:26.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:27.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:39.530 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:16:39.531 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:39.532 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:39.533 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:16:39.534 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:16:39.535 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:16:39.537 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:16:39.538 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:16:39.539 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:16:39.540 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:39.541 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:39.542 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:16:39.543 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:16:39.544 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:16:39.546 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:16:39.547 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:16:39.548 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 292 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=ff4e569a
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:16:39.559 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:16:39.560 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:16:39.560 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:16:39.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:39.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:39.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:44.559 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:16:44.560 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:16:48.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:48.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:48.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:51.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:51.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:51.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:16:51.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:16:52.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:16:52.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:04.885 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:04.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:04.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:13.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:13.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:13.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:16.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:16.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:16.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:16.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:16.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:17.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:29.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:29.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:29.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:38.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:38.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:38.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:41.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:41.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:41.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:41.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:41.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:42.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:17:54.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:17:54.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:17:54.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:03.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:03.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:03.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:06.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:06.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:06.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:06.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:06.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:07.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:19.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:19.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:19.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:28.914 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:28.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:28.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:31.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:31.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:31.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:31.998 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:31.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:32.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:44.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:44.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:44.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:53.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:53.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:53.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:56.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:56.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:56.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:18:56.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:18:56.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:18:57.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:09.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:09.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:09.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:18.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:18.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:18.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:21.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:21.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:21.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:21.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:22.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:22.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:34.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:34.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:34.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:43.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:43.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:43.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:46.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:46.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:46.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:46.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:47.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:47.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:51.827 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:19:51.828 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:51.828 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:51.829 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:19:51.830 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:19:51.831 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:19:51.833 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:19:51.834 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:19:51.835 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:19:51.836 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:51.837 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:51.838 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:19:51.839 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:19:51.840 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:19:51.842 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:19:51.843 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:19:51.845 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 332 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=ca220d77
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:19:51.856 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:19:51.857 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:19:51.858 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:19:51.869 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:19:51.870 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:51.871 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:51.871 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:19:51.872 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:19:51.873 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:19:51.875 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:19:51.876 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:19:51.877 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:19:51.878 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:51.879 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:19:51.880 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:19:51.881 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:19:51.882 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:19:51.884 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:19:51.885 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:19:51.887 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 332 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=70da7267
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:19:51.897 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:19:51.898 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:19:51.899 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:19:56.856 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:19:56.857 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:19:56.897 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:19:56.898 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:19:59.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:19:59.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:19:59.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:08.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:08.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:08.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:11.561 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:11.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:11.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:11.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:12.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:12.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:24.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:24.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:24.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:33.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:33.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:33.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:36.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:36.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:36.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:36.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:37.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:37.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:49.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:49.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:49.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:20:58.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:20:58.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:20:58.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:01.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:01.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:01.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:01.999 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:02.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:02.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:14.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:14.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:14.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:23.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:23.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:23.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:26.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:26.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:26.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:27.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:27.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:27.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:39.886 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:39.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:39.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:48.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:48.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:48.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:51.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:51.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:51.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:21:52.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:21:52.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:21:52.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:04.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:04.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:04.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:13.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:13.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:13.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:16.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:16.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:16.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:17.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:17.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:17.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:29.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:29.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:29.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:38.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:38.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:38.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:41.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:41.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:41.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:42.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:42.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:42.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:47.964 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:22:47.965 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:47.966 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:47.967 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:22:47.967 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:22:47.968 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:22:47.971 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:22:47.972 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:22:47.973 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:22:47.974 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:47.975 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:22:47.976 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:22:47.976 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:22:47.977 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:22:47.979 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:22:47.981 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:22:47.982 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 663 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=32167c69
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="6W8enWZQSZHQxkvNhKG/jQ==",uri="sip:ims.ge.chinamobile.com",response="3c9965651d30e5c880a497f1e640d01d",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:22:48.132 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:22:48.133 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:22:48.134 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:22:48.135 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:22:48.146 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:22:48.148 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, HtekYQzARUWY+8N7TVUnLg==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:22:48.149 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="HtekYQzARUWY+8N7TVUnLg==",uri="sip:ims.ge.chinamobile.com",response="6db4edcb94cddbe7db3b15e4c585b9f7",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:22:48.151 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:22:48.290 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:22:48.291 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:22:48.292 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:22:53.133 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:22:53.134 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:22:53.291 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:22:53.292 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:22:54.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:22:54.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:22:54.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:03.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:03.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:03.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:06.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:06.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:06.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:07.000 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:07.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:07.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:19.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:19.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:19.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:28.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:28.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:28.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:31.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:31.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:31.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:32.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:32.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:32.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:44.887 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:44.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:44.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:53.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:53.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:53.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:56.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:56.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:56.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:23:57.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:23:57.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:23:57.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:09.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:09.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:09.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:18.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:18.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:18.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:21.562 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:21.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:21.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:22.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:22.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:22.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:34.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:34.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:34.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:43.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:43.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:43.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:46.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:46.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:46.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:47.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:47.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:47.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:24:59.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:24:59.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:24:59.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:08.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:08.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:08.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:11.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:11.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:11.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:12.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:12.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:12.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:24.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:24.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:24.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:33.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:33.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:33.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:36.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:36.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:36.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:37.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:37.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:37.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:39.564 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:25:39.565 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:39.566 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:39.567 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:25:39.568 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:25:39.569 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:25:39.571 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:25:39.572 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:25:39.573 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:25:39.574 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:39.575 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:39.576 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:25:39.577 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:25:39.578 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:25:39.580 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:25:39.581 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:25:39.583 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 293 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=dd1c18f9
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:25:39.594 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:25:39.595 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:25:39.596 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:25:44.594 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:25:44.596 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:25:49.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:49.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:49.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:25:58.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:25:58.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:25:58.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:01.563 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:01.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:01.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:02.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:02.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:02.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:14.888 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:14.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:14.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:23.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:23.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:23.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:26.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:26.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:26.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:27.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:27.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:27.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:39.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:39.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:39.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:48.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:48.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:48.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:51.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:51.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:51.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:26:52.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:26:52.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:26:52.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:04.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:04.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:04.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:13.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:13.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:13.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:16.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:16.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:16.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:17.001 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:17.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:17.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:29.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:29.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:29.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:38.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:38.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:38.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:41.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:41.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:41.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:42.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:42.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:42.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:27:54.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:27:54.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:27:54.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:03.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:03.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:03.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:06.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:06.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:06.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:07.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:07.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:07.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:19.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:19.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:19.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:28.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:28.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:28.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:31.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:31.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:31.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:32.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:32.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:32.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:44.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:44.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:44.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:51.861 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:28:51.862 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:51.863 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:51.864 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:28:51.865 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:28:51.865 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:28:51.868 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:28:51.869 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:28:51.870 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:28:51.871 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:51.871 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:51.872 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:28:51.873 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:28:51.874 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:28:51.876 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:28:51.878 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:28:51.879 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 333 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=3f000e9c
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:28:51.889 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:28:51.891 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:28:51.891 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:28:51.902 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:28:51.903 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:51.904 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:51.905 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:28:51.906 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:28:51.907 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:28:51.909 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:28:51.910 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:28:51.911 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:28:51.912 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:51.912 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:51.913 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:28:51.914 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:28:51.915 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:28:51.917 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:28:51.919 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:28:51.920 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 333 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=113fac22
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:28:51.930 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:28:51.931 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:28:51.932 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:28:53.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:53.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:53.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:56.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:56.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:56.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:28:56.889 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:28:56.890 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:28:56.931 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:28:56.932 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:28:57.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:28:57.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:28:57.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:09.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:09.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:09.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:18.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:18.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:18.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:21.564 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:21.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:21.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:22.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:22.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:22.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:34.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:34.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:34.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:43.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:43.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:43.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:46.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:46.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:46.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:47.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:47.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:47.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:29:59.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:29:59.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:29:59.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:08.915 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:08.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:08.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:11.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:11.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:11.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:12.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:12.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:12.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:24.889 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:24.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:24.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:33.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:33.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:33.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:36.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:36.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:36.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:37.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:37.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:37.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:49.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:49.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:49.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:30:58.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:30:58.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:30:58.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:01.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:01.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:01.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:02.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:02.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:02.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:14.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:14.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:14.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:23.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:23.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:23.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:26.565 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:26.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:26.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:27.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:27.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:27.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:39.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:39.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:39.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:48.295 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:31:48.296 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:48.297 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:48.298 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:31:48.299 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:31:48.300 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:31:48.302 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:31:48.303 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:31:48.304 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:31:48.305 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:48.306 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:48.307 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:31:48.308 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:31:48.309 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:31:48.311 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:31:48.313 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:31:48.314 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 665 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=93a4073e
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="HtekYQzARUWY+8N7TVUnLg==",uri="sip:ims.ge.chinamobile.com",response="6db4edcb94cddbe7db3b15e4c585b9f7",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:31:48.466 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:31:48.467 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:31:48.467 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:31:48.468 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:31:48.479 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:31:48.481 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, 6mOumcN2rBCADmxIp5CxUQ==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:31:48.483 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="6mOumcN2rBCADmxIp5CxUQ==",uri="sip:ims.ge.chinamobile.com",response="7c28a656e324c7c37c4a97393f975d0a",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:31:48.484 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:31:48.611 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:31:48.612 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:31:48.613 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:31:48.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:48.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:48.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:51.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:51.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:51.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:52.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:31:52.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:31:52.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:31:53.465 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:31:53.467 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:31:53.612 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:31:53.613 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:32:04.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:04.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:04.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:13.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:13.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:13.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:16.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:16.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:16.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:17.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:17.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:17.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:29.890 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:29.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:29.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:38.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:38.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:38.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:41.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:41.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:41.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:42.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:42.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:42.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:32:54.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:32:54.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:32:54.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:03.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:03.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:03.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:06.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:06.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:06.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:07.002 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:07.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:07.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:19.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:19.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:19.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:28.916 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:28.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:28.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:31.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:31.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:31.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:32.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:32.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:32.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:44.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:44.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:44.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:53.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:53.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:53.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:56.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:56.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:56.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:33:57.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:33:57.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:33:57.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:09.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:09.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:09.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:18.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:18.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:18.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:21.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:21.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:21.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:22.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:22.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:22.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:34.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:34.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:34.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:39.603 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:34:39.604 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:39.605 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:39.605 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:34:39.606 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:34:39.607 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:34:39.609 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:34:39.610 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:34:39.611 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:34:39.612 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:39.613 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:39.614 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:34:39.615 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:34:39.616 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:34:39.618 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:34:39.620 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:34:39.621 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 294 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=92d08d85
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:34:39.631 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:34:39.632 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:34:39.633 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:34:43.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:43.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:43.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:44.631 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:34:44.632 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:34:46.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:46.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:46.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:47.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:47.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:47.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:34:59.891 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:34:59.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:34:59.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:08.917 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:08.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:08.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:11.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:11.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:11.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:12.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:12.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:12.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:24.892 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:24.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:24.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:33.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:33.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:33.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:36.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:36.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:36.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:37.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:37.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:37.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:49.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:49.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:49.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:35:58.918 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:35:58.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:35:58.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:01.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:01.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:01.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:02.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:02.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:02.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:14.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:14.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:14.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:23.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:23.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:23.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:26.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:26.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:26.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:27.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:27.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:27.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:39.893 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:39.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:39.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:48.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:48.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:48.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:51.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:51.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:51.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:36:52.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:36:52.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:36:52.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:04.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:04.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:04.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:13.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:13.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:13.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:16.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:16.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:16.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:17.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:17.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:17.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:29.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:29.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:29.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:38.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:38.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:38.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:41.566 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:41.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:41.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:42.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:42.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:42.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:51.895 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:37:51.896 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:51.897 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:51.898 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:37:51.898 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:37:51.899 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:37:51.901 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:37:51.903 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:37:51.904 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:37:51.904 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:51.905 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:51.906 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:37:51.907 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:37:51.908 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:37:51.910 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:37:51.912 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:37:51.913 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 334 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=c3603406
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:37:51.923 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:37:51.924 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:37:51.925 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:37:51.935 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:37:51.936 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:51.937 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:51.938 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:37:51.939 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:37:51.940 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:37:51.942 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:37:51.943 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:37:51.944 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:37:51.945 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:51.945 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:51.947 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:37:51.948 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:37:51.949 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:37:51.951 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:37:51.952 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:37:51.953 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 334 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=764aee45
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:37:51.964 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:37:51.965 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:37:51.965 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:37:54.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:37:54.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:37:54.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:37:56.923 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:37:56.924 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:37:56.964 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:37:56.965 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:38:03.919 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:03.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:03.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:06.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:06.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:06.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:07.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:07.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:07.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:19.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:19.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:19.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:28.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:28.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:28.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:31.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:31.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:31.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:32.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:32.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:32.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:44.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:44.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:44.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:53.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:53.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:53.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:56.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:56.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:56.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:38:57.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:38:57.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:38:57.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:09.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:09.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:09.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:18.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:18.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:18.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:21.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:21.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:21.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:22.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:22.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:22.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:34.894 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:34.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:34.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:43.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:43.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:43.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:46.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:46.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:46.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:47.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:47.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:47.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:39:59.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:39:59.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:39:59.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:08.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:08.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:08.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:11.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:11.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:11.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:12.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:12.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:12.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:24.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:24.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:24.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:33.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:33.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:33.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:36.567 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:36.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:36.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:37.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:37.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:37.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:48.616 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:40:48.617 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:48.618 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:48.619 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:40:48.620 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:40:48.621 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:40:48.623 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:40:48.624 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:40:48.625 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:40:48.626 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:48.627 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:48.628 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:40:48.629 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:40:48.630 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:40:48.632 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:40:48.633 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:40:48.635 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 667 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=aaa1fe18
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="6mOumcN2rBCADmxIp5CxUQ==",uri="sip:ims.ge.chinamobile.com",response="7c28a656e324c7c37c4a97393f975d0a",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:40:48.810 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:40:48.811 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:40:48.812 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:40:48.812 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:40:48.824 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:40:48.825 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, xdnG5tQVloz5LaZ9zHLajw==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:40:48.827 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="xdnG5tQVloz5LaZ9zHLajw==",uri="sip:ims.ge.chinamobile.com",response="afac290860d13c26826d198852a75c33",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:40:48.828 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:40:48.944 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:40:48.945 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:40:48.946 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:40:49.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:49.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:49.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:40:53.811 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:40:53.813 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:40:53.944 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:40:53.945 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:40:58.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:40:58.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:40:58.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:01.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:01.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:01.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:02.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:02.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:02.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:14.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:14.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:14.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:23.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:23.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:23.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:26.568 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:26.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:26.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:27.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:27.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:27.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:39.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:39.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:39.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:48.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:48.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:48.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:51.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:51.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:51.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:41:52.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:41:52.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:41:52.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:04.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:04.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:04.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:13.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:13.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:13.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:16.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:16.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:16.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:17.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:17.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:17.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:29.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:29.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:29.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:38.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:38.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:38.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:41.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:41.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:41.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:42.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:42.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:42.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:42:54.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:42:54.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:42:54.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:03.920 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:03.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:03.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:06.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:06.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:06.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:07.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:07.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:07.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:19.895 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:19.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:19.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:28.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:28.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:28.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:31.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:31.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:31.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:32.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:32.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:32.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:39.636 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:43:39.637 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:39.638 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:39.639 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:43:39.640 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:43:39.641 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:43:39.643 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:43:39.644 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:43:39.645 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:43:39.646 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:39.647 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:39.648 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:43:39.649 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:43:39.650 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:43:39.652 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:43:39.653 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:43:39.655 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 295 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=743281d0
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:43:39.665 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:43:39.666 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:43:39.667 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:43:44.666 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:43:44.667 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:43:44.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:44.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:44.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:53.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:53.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:53.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:56.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:56.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:56.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:43:57.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:43:57.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:43:57.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:09.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:09.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:09.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:18.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:18.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:18.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:21.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:21.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:21.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:22.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:22.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:22.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:34.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:34.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:34.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:43.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:43.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:43.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:46.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:46.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:46.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:47.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:47.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:47.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:44:59.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:44:59.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:44:59.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:08.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:08.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:08.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:11.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:11.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:11.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:12.003 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:12.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:12.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:24.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:24.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:24.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:33.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:33.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:33.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:36.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:36.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:36.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:37.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:37.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:37.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:49.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:49.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:49.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:45:58.921 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:45:58.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:45:58.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:01.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:01.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:01.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:02.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:02.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:02.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:14.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:14.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:14.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:23.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:23.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:23.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:26.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:26.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:26.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:27.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:27.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:27.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:39.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:39.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:39.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:48.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:48.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:48.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:51.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:51.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.929 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:46:51.930 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:51.931 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.931 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:46:51.932 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:46:51.933 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:46:51.935 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:46:51.936 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:46:51.937 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:46:51.938 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:51.939 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.940 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:46:51.941 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:46:51.942 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:46:51.944 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:46:51.946 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:46:51.947 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 335 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=46216fb5
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:46:51.957 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:46:51.958 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:46:51.959 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:46:51.969 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:46:51.970 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:51.970 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.971 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:46:51.972 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:46:51.973 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:46:51.975 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:46:51.976 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:46:51.977 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:46:51.978 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:51.979 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:51.980 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:46:51.981 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:46:51.982 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:46:51.984 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:46:51.985 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:46:51.987 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 335 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=569ccd4
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:46:51.997 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:46:51.998 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:46:51.999 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:46:52.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:46:52.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:46:52.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:46:56.957 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:46:56.958 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:46:56.998 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:46:56.999 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:47:04.896 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:04.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:04.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:13.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:13.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:13.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:16.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:16.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:16.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:17.004 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:17.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:17.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:29.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:29.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:29.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:38.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:38.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:38.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:41.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:41.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:41.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:42.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:42.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:42.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:47:54.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:47:54.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:47:54.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:03.922 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:03.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:03.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:06.569 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:06.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:06.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:07.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:07.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:07.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:19.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:19.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:19.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:28.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:28.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:28.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:31.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:31.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:31.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:32.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:32.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:32.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:44.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:44.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:44.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:53.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:53.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:53.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:56.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:56.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:56.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:48:57.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:48:57.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:48:57.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:09.897 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:09.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:09.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:18.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:18.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:18.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:21.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:21.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:21.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:22.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:22.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:22.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:34.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:34.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:34.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:43.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:43.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:43.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:46.570 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:46.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:46.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:47.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:47.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:47.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:48.949 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:49:48.950 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:48.951 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:48.952 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:49:48.953 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:49:48.954 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:49:48.956 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:49:48.957 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:49:48.958 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:49:48.959 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:48.960 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:49:48.962 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:49:48.963 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:49:48.963 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:49:48.965 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:49:48.967 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:49:48.968 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 669 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=ac6b2708
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="xdnG5tQVloz5LaZ9zHLajw==",uri="sip:ims.ge.chinamobile.com",response="afac290860d13c26826d198852a75c33",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:49:49.147 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:49:49.148 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:49:49.149 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:49:49.150 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:49:49.161 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:49:49.163 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, NnaEwPPKMTMl5UoK9BKbgA==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:49:49.165 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="NnaEwPPKMTMl5UoK9BKbgA==",uri="sip:ims.ge.chinamobile.com",response="e3bc4e156b6097549f8f7b00f3652245",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:49:49.166 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:49:49.305 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:49:49.306 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:49:49.307 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:49:54.148 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:49:54.150 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:49:54.305 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:49:54.306 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:49:59.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:49:59.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:49:59.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:08.923 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:08.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:08.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:11.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:11.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:11.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:12.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:12.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:12.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:24.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:24.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:24.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:33.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:33.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:33.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:36.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:36.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:36.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:37.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:37.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:37.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:49.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:49.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:49.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:50:58.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:50:58.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:50:58.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:01.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:01.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:01.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:02.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:02.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:02.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:14.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:14.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:14.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:23.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:23.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:23.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:26.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:26.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:26.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:27.005 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:27.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:27.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:39.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:39.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:39.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:48.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:48.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:48.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:51.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:51.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:51.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:51:52.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:51:52.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:51:52.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:04.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:04.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:04.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:09.317 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.DnsSettings@251e32b
2020-09-19 13:52:12.784 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:52:12.823 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.history_logging
2020-09-19 13:52:12.825 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.show_history
2020-09-19 13:52:12.827 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.typing_notifications
2020-09-19 13:52:12.832 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.smiley_replacement
2020-09-19 13:52:12.836 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.remove.special
2020-09-19 13:52:12.838 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.convert.letters
2020-09-19 13:52:12.852 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.SettingsActivity@ecc4ab
2020-09-19 13:52:13.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:13.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:13.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:16.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:16.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:16.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:17.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:17.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:17.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:25.457 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:52:25.469 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.Jitsi@4f51d2
2020-09-19 13:52:25.475 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:52:25.477 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:52:25.478 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:52:25.480 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:52:29.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:29.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:29.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:38.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:38.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:38.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:39.670 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:52:39.671 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:39.672 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:39.673 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:39.674 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:39.674 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:39.677 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:39.678 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:52:39.679 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:52:39.680 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:39.681 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:39.682 较详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:39.683 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:39.684 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:39.686 较详细: [1230] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:39.687 详细: [1230] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:52:39.688 详细: [1230] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 216acd031c00ded12504ea833737b1d3@::
CSeq: 296 REGISTER
From: "78997" <sip:78997@192.168.125.254>;tag=340344b2
To: "78997" <sip:78997@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "78997" <sip:78997@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:52:39.698 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:52:39.699 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:39.700 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:52:41.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:41.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:41.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:42.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:42.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:42.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:44.699 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:44.700 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:52:52.978 信息: [8292] impl.protocol.sip.OperationSetBasicTelephonySipImpl.createOutgoingCall().237 Creating outgoing call to sip:45645@192.168.125.254
2020-09-19 13:52:52.980 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:52:52.981 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:52.982 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:52.983 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:52.984 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:52.986 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:52.987 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:52:52.991 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:52.993 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:52:52.994 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:52:52.995 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:52.997 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:52.998 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:53.001 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:53.002 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:52:53.003 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:53.004 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:52:53.006 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:53.007 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:52:53.009 较详细: [8292] impl.protocol.sip.CallSipImpl.invite().520 trying default transport
2020-09-19 13:52:53.032 详细: [8292] service.protocol.Call.fireCallPeerEvent().251 Dispatching a CallPeer event to 1 listeners. The event is: CallPeerEvent: ID=1 source peer=45645 <45645@192.168.125.254>;status=Unknown source call=Call: id=16004947729751021300 peers=1
2020-09-19 13:52:53.033 详细: [8292] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().389 Dispatching a CallPeerChangeEvent event to 1 listeners. event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Unknown newV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call for peer=45645 <45645@192.168.125.254>;status=Initiating Call
2020-09-19 13:52:53.035 详细: [8292] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.CallSipImpl . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Unknown newV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call for peer=45645 <45645@192.168.125.254>;status=Initiating Call
2020-09-19 13:52:53.042 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().199 Dispatching a CallEvent to 5 listeners. The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.044 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.service.protocol.SingleCallInProgressPolicy$SingleCallInProgressPolicyListener . The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.045 较详细: [8292] service.protocol.SingleCallInProgressPolicy.handleCallEvent().274 Call event fired.
2020-09-19 13:52:53.046 较详细: [8292] service.protocol.SingleCallInProgressPolicy.addCallListener().141 Add call change listener
2020-09-19 13:52:53.048 较详细: [8292] service.protocol.SingleCallInProgressPolicy.run().773 On the phone status policy run.
2020-09-19 13:52:53.051 较详细: [8292] service.protocol.SingleCallInProgressPolicy.run().782 On the phone status is not enabled.
2020-09-19 13:52:53.052 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.054 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl . The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.056 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class org.jitsi.android.gui.call.AndroidCallListener . The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.058 详细: [8292] org.jitsi.android.gui.call.AndroidCallListener.storeSpeakerPhoneStatus().155 Storing speakerphone status: false
2020-09-19 13:52:53.073 详细: [8292] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.impl.protocol.sip.OperationSetTelephonyConferencingSipImpl . The event is: CallEvent:[ id=1 Call=Call: id=16004947729751021300 peers=1]
2020-09-19 13:52:53.074 详细: [8292] service.protocol.media.CallPeerMediaHandler.setLocalVideoTransmissionEnabled().1793 Setting local video transmission enabled: false
2020-09-19 13:52:53.085 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:53.087 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:53.088 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:53.091 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:53.092 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.DialogActivity@f017728
2020-09-19 13:52:53.136 较详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:53.138 详细: [8292] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:52:53.139 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:53.143 较详细: [8292] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:53.146 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:52:53.180 详细: [8292] impl.protocol.sip.CallPeerSipImpl.invite().1513 sent request:
INVITE sip:45645@192.168.125.254 SIP/2.0
Call-ID: 2db09dc8747ab17d2cc02f4aa5401a63@::
CSeq: 1 INVITE
From: "34234" <sip:34234@192.168.125.254>;tag=f26d28cc
To: <sip:45645@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061;branch=z9hG4bK-383730-bdea8b5797be8dccccd5a05fcbd748e5
Max-Forwards: 70
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>
User-Agent: Jitsi0.1.0Linux
Content-Type: application/sdp
Content-Length: 797

v=0
o=34234-jitsi.org 0 0 IN IP4 192.168.122.100
s=-
c=IN IP4 192.168.122.100
t=0 0
m=audio 5000 RTP/AVP 96 97 98 9 100 102 0 8 103 3 104 101
a=rtpmap:96 opus/48000/2
a=fmtp:96 usedtx=1
a=rtpmap:97 SILK/24000
a=rtpmap:98 SILK/16000
a=rtpmap:9 G722/8000
a=rtpmap:100 speex/32000
a=rtpmap:102 speex/16000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:103 iLBC/8000
a=rtpmap:3 GSM/8000
a=rtpmap:104 speex/8000
a=rtpmap:101 telephone-event/8000
a=extmap:1/recvonly urn:ietf:params:rtp-hdrext:csrc-audio-level
a=rtcp-xr:voip-metrics
m=video 5002 RTP/AVP 105 99
a=recvonly
a=rtpmap:105 H264/90000
a=fmtp:105 packetization-mode=1;profile-level-id=4DE01f
a=imageattr:105 send * recv *
a=rtpmap:99 H264/90000
a=fmtp:99 profile-level-id=4DE01f
a=imageattr:99 send * recv *

2020-09-19 13:52:53.190 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 100 Giving a try
2020-09-19 13:52:53.192 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:53.193 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:52:53.196 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:52:53.198 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:52:53.199 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Initiating Call
2020-09-19 13:52:53.201 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Initiating Call
2020-09-19 13:52:53.204 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().389 Dispatching a CallPeerChangeEvent event to 4 listeners. event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call newV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting for peer=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.207 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.CallSipImpl . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call newV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting for peer=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.209 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call newV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting for peer=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.218 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call newV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting for peer=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.222 较详细: [8294] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:52:53.223 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.service.protocol.media.AbstractOperationSetTelephonyConferencing$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Initiating Call newV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting for peer=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.266 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 180 Ringing
2020-09-19 13:52:53.267 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:53.268 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:52:53.284 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:52:53.285 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:52:53.288 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.289 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connecting
2020-09-19 13:52:53.292 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().389 Dispatching a CallPeerChangeEvent event to 4 listeners. event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting newV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) for peer=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:53.294 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.CallSipImpl . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting newV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) for peer=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:53.296 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting newV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) for peer=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:53.307 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.call.VideoCallActivity@52cf000
2020-09-19 13:52:53.314 较详细: [1] org.jitsi.android.gui.call.ProximitySensorFragment.onResume().97 Device has 0 sensors
2020-09-19 13:52:53.316 较详细: [1] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().597 Remote video removed 190624443
2020-09-19 13:52:53.325 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size -1.0 : -1.0
2020-09-19 13:52:53.355 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting newV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) for peer=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:53.356 较详细: [8294] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:52:53.357 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.service.protocol.media.AbstractOperationSetTelephonyConferencing$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connecting newV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) for peer=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:54.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:52:54.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:54.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:56.079 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:52:56.080 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:56.081 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:52:56.082 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:52:56.084 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:52:56.085 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:56.086 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:56.088 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:52:56.089 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:52:56.090 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:52:56.092 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:52:56.093 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:52:56.094 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:52:56.096 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:52:56.098 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:52:56.110 较详细: [351] impl.protocol.sip.sdp.SdpUtils.getCallInfoURL().1381 Call URI was null.
2020-09-19 13:52:56.122 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing audio stream for 45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:56.177 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] getPrivatePersistentFile
2020-09-19 13:52:56.179 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] accessibleFile
2020-09-19 13:52:56.181 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] accessibleFile
2020-09-19 13:52:56.183 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] getPrivatePersistentFile
2020-09-19 13:52:56.203 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Created AudioMediaStreamImpl with hashCode 179044372
2020-09-19 13:52:56.206 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:52:56.207 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:52:56.210 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Set target of AudioMediaStreamImpl with hashCode 179044372 to MediaStreamTarget with dataAddress 192.168.122.105/192.168.122.105:50040 and controlAddress 192.168.122.105/192.168.122.105:50041
2020-09-19 13:52:56.211 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing direction of stream 179044372 from:null to:sendrecv
2020-09-19 13:52:56.213 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing format of stream 179044372 from: null to: rtpmap:0 PCMU/8000
2020-09-19 13:52:56.214 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Set format rtpmap:0 PCMU/8000 on AudioMediaDeviceSession 112873661
2020-09-19 13:52:56.217 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() AUDIO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: true, multi: 0
2020-09-19 13:52:56.225 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing video stream for 45645 <45645@192.168.125.254>;status=Alerting Remote User (Ringing)
2020-09-19 13:52:56.240 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] getPrivatePersistentFile
2020-09-19 13:52:56.242 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] accessibleFile
2020-09-19 13:52:56.244 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] accessibleFile
2020-09-19 13:52:56.246 非常详细: [351] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] getPrivatePersistentFile
2020-09-19 13:52:56.260 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Created VideoMediaStreamImpl with hashCode 208856579
2020-09-19 13:52:56.263 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:52:56.265 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:52:56.266 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Set target of VideoMediaStreamImpl with hashCode 208856579 to MediaStreamTarget with dataAddress 192.168.122.105/192.168.122.105:50042 and controlAddress 192.168.122.105/192.168.122.105:50043
2020-09-19 13:52:56.268 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing direction of stream 208856579 from:null to:recvonly
2020-09-19 13:52:56.269 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing format of stream 208856579 from: null to: rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f;packetization-mode=1
2020-09-19 13:52:56.274 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Set format rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f;packetization-mode=1 on VideoMediaDeviceSession 139659648
2020-09-19 13:52:56.276 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() VIDEO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: false, multi: 0
2020-09-19 13:52:56.278 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().389 Dispatching a CallPeerChangeEvent event to 5 listeners. event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.280 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.CallSipImpl . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.281 详细: [351] service.protocol.Call.fireCallChangeEvent().334 Dispatching a CallChange event to 7 listeners. The event is: CallChangeEvent: type=CallState oldV=net.java.sip.communicator.service.protocol.CallState:Initializing newV=net.java.sip.communicator.service.protocol.CallState:In Progress
2020-09-19 13:52:56.282 较详细: [351] service.protocol.SingleCallInProgressPolicy.callStateChanged().194 Call state changed.
2020-09-19 13:52:56.285 较详细: [351] service.protocol.SingleCallInProgressPolicy.callStateChanged().595 Call state changed.[2]
2020-09-19 13:52:56.287 较详细: [351] service.protocol.SingleCallInProgressPolicy.run().773 On the phone status policy run.
2020-09-19 13:52:56.290 较详细: [351] service.protocol.SingleCallInProgressPolicy.run().782 On the phone status is not enabled.
2020-09-19 13:52:56.291 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.295 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.296 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.service.protocol.media.AbstractOperationSetTelephonyConferencing$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.298 详细: [351] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.util.call.CallPeerAdapter . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Alerting Remote User (Ringing) newV=net.java.sip.communicator.service.protocol.CallPeerState:Connected for peer=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:52:56.299 信息: [351] service.protocol.media.CallPeerMediaHandler.start().1963 Starting
2020-09-19 13:52:56.303 较详细: [351] fmj.newInstance() Trying RTPManager class: org.jitsi.impl.neomedia.jmfext.media.rtp.RTPSessionMgr
2020-09-19 13:52:56.307 详细: [351] org.jitsi.impl.neomedia.AudioMediaStreamImpl.debug() registering format ALAW/rtp, 8000.0 Hz, 8-bit, Mono, Signed with RTP manager
2020-09-19 13:52:56.308 详细: [351] org.jitsi.impl.neomedia.AudioMediaStreamImpl.debug() registering format g722/rtp, 8000.0 Hz, Mono with RTP manager
2020-09-19 13:52:56.312 较详细: [351] org.jitsi.impl.neomedia.AudioMediaStreamImpl.trace() Set receiver buffer length to 120
2020-09-19 13:52:56.328 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] getPrivatePersistentFile
2020-09-19 13:52:56.330 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] accessibleFile
2020-09-19 13:52:56.332 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] accessibleFile
2020-09-19 13:52:56.333 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] getPrivatePersistentFile
2020-09-19 13:52:56.334 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] getPrivatePersistentFile
2020-09-19 13:52:56.335 较详细: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 1091859388
2020-09-19 13:52:56.336 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:52:56.337 详细: [8307] net.sf.fmj.media.Log.write() #
# FMJ
#

2020-09-19 13:52:56.338 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] accessibleFile
2020-09-19 13:52:56.339 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:52:56.339 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:52:56.341 详细: [8307] net.sf.fmj.media.Log.comment() Platform: Linux, armv8l, 3.18.35+
2020-09-19 13:52:56.342 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] accessibleFile
2020-09-19 13:52:56.343 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:52:56.344 详细: [8305] service.protocol.AbstractCallPeer.fireCallPeerSecurityNegotiationStartedEvent().565 Dispatching a CallPeerSecurityStatusEvent event to 2 listeners. event is: net.java.sip.communicator.service.protocol.event.CallPeerSecurityNegotiationStartedEvent[source=45645 <45645@192.168.125.254>;status=Connected]
2020-09-19 13:52:56.345 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:52:56.346 详细: [8307] net.sf.fmj.media.Log.comment() Java VM: The Android Project, 0
2020-09-19 13:52:56.347 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] getPrivatePersistentFile
2020-09-19 13:52:56.348 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:52:56.349 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:52:56.351 详细: [8307] net.sf.fmj.media.Log.write() 
2020-09-19 13:52:56.351 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] getPrivatePersistentFile
2020-09-19 13:52:56.352 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:52:56.353 信息: [8307] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 5596
2020-09-19 13:52:56.354 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:52:56.355 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logEntry() [entry] accessibleFile
2020-09-19 13:52:56.356 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:52:56.356 详细: [8307] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:52:56.357 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] accessibleFile
2020-09-19 13:52:56.359 详细: [8307] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:52:56.360 非常详细: [343] org.jitsi.impl.fileaccess.FileAccessServiceImpl.logExit() [exit] getPrivatePersistentFile
2020-09-19 13:52:56.365 较详细: [8304] net.sf.fmj.media.Log.profile() Profile: instantiation: 1 ms

2020-09-19 13:52:56.367 较详细: [351] net.sf.fmj.media.Log.profile() Profile: instantiation: 1 ms

2020-09-19 13:52:56.370 较详细: [8304] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 228579957 for ReceiveStreamPushBufferDataSource with hashCode 220060170
2020-09-19 13:52:56.372 信息: [8317] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:52:56.375 较详细: [8317] net.sf.fmj.media.Log.profile() Profile: parsing: 3 ms

2020-09-19 13:52:56.378 较详细: [8313] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:52:56.382 详细: [8321] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:52:56.383 详细: [8321] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:52:56.385 详细: [8321] net.sf.fmj.media.Log.comment() Input: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:52:56.387 详细: [8321] net.sf.fmj.media.Log.comment() Custom options specified.
2020-09-19 13:52:56.391 详细: [8321] net.sf.fmj.media.Log.comment() A custom codec is specified: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:52:56.396 详细: [8321] net.sf.fmj.media.Log.comment() A custom renderer is specified: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@cc78cd6
2020-09-19 13:52:56.401 详细: [8321] net.sf.fmj.media.Log.write()     

2020-09-19 13:52:56.402 详细: [8321] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:52:56.403 详细: [8321] net.sf.fmj.media.Log.write()       net.sf.fmj.media.parser.RawPushBufferParser@1645b57
2020-09-19 13:52:56.406 详细: [8321] net.sf.fmj.media.Log.write()          connects to: com.sun.media.codec.audio.ulaw.DePacketizer@7d99644
2020-09-19 13:52:56.407 信息: [8319] org.jitsi.impl.neomedia.jmfext.media.protocol.audiorecord.DataSource.configureEffects().381 Echo cancellation: true
2020-09-19 13:52:56.407 详细: [8321] net.sf.fmj.media.Log.write()          format: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:52:56.409 详细: [8321] net.sf.fmj.media.Log.write()       com.sun.media.codec.audio.ulaw.DePacketizer@7d99644
2020-09-19 13:52:56.410 详细: [8321] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@5e32d
2020-09-19 13:52:56.411 详细: [8321] net.sf.fmj.media.Log.write()          format: ULAW, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:52:56.412 详细: [8321] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@5e32d
2020-09-19 13:52:56.413 详细: [8321] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:52:56.414 详细: [8321] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:52:56.418 详细: [8321] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:52:56.420 详细: [8321] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@cc78cd6
2020-09-19 13:52:56.421 详细: [8321] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:52:56.422 详细: [8321] net.sf.fmj.media.Log.write()     

2020-09-19 13:52:56.424 较详细: [8321] net.sf.fmj.media.Log.profile() Profile: graph building: 40 ms

2020-09-19 13:52:56.425 较详细: [8321] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:52:56.429 信息: [8319] org.jitsi.impl.neomedia.jmfext.media.protocol.audiorecord.DataSource.configureEffects().396 Auto gain control: true
2020-09-19 13:52:56.456 信息: [8319] org.jitsi.impl.neomedia.jmfext.media.protocol.audiorecord.DataSource.configureEffects().410 Noise suppressor: true
2020-09-19 13:52:56.462 较详细: [8319] net.sf.fmj.media.Log.profile() Profile: parsing: 83 ms

2020-09-19 13:52:56.610 详细: [8312] net.sf.fmj.media.Log.comment() Getting the supported output formats for:
2020-09-19 13:52:56.611 详细: [8312] net.sf.fmj.media.Log.comment()   LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed
2020-09-19 13:52:56.612 详细: [8312] net.sf.fmj.media.Log.comment()   # of nodes visited: 458
2020-09-19 13:52:56.614 详细: [8312] net.sf.fmj.media.Log.comment()   # of formats supported: 149

2020-09-19 13:52:56.615 较详细: [8312] net.sf.fmj.media.Log.profile() Profile: getSupportedOutputFormats: 150 ms

2020-09-19 13:52:56.632 较详细: [8312] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Set format of track 0 to ULAW/rtp, 8000.0 Hz, 8-bit, Mono, FrameSize=8 bits
2020-09-19 13:52:56.636 详细: [8334] net.sf.fmj.media.Log.comment() Building flow graph for: audiorecord:

2020-09-19 13:52:56.638 详细: [8334] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:52:56.639 详细: [8334] net.sf.fmj.media.Log.comment() Input: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed
2020-09-19 13:52:56.640 详细: [8334] net.sf.fmj.media.Log.comment() Custom options specified.
2020-09-19 13:52:56.641 详细: [8334] net.sf.fmj.media.Log.comment() A custom codec is specified: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@d6955f3
2020-09-19 13:52:56.642 详细: [8334] net.sf.fmj.media.Log.comment() An output format is specified: ULAW/rtp, 8000.0 Hz, 8-bit, Mono, FrameSize=8 bits
2020-09-19 13:52:56.643 详细: [8334] net.sf.fmj.media.Log.comment() An output content type is specified: raw.rtp
2020-09-19 13:52:56.650 详细: [8334] net.sf.fmj.media.Log.write()     

2020-09-19 13:52:56.665 详细: [8334] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:52:56.666 详细: [8334] net.sf.fmj.media.Log.write()       com.sun.media.parser.RawPullBufferParser@afbd2b0
2020-09-19 13:52:56.667 详细: [8334] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@d6955f3
2020-09-19 13:52:56.668 详细: [8334] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed
2020-09-19 13:52:56.669 详细: [8334] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@d6955f3
2020-09-19 13:52:56.670 详细: [8334] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.audio.ulaw.JavaEncoder@b8a8529
2020-09-19 13:52:56.671 详细: [8334] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:52:56.672 详细: [8334] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.audio.ulaw.JavaEncoder@b8a8529
2020-09-19 13:52:56.673 详细: [8334] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.audio.ulaw.Packetizer@54360ae
2020-09-19 13:52:56.674 详细: [8334] net.sf.fmj.media.Log.write()          format: ULAW, 8000.0 Hz, 8-bit, Mono, FrameSize=8 bits
2020-09-19 13:52:56.675 详细: [8334] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.audio.ulaw.Packetizer@54360ae
2020-09-19 13:52:56.676 详细: [8334] net.sf.fmj.media.Log.write()          connects to: com.sun.media.multiplexer.RTPSyncBufferMux@9b95e4f
2020-09-19 13:52:56.678 详细: [8334] net.sf.fmj.media.Log.write()          format: ULAW/rtp, 8000.0 Hz, 8-bit, Mono, FrameSize=8 bits
2020-09-19 13:52:56.679 详细: [8334] net.sf.fmj.media.Log.write()     

2020-09-19 13:52:56.680 较详细: [8334] net.sf.fmj.media.Log.profile() Profile: graph building: 42 ms

2020-09-19 13:52:56.681 较详细: [8334] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:52:56.684 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Processor with hashCode 144214168 provided RawBufferDataSource with hashCode 247687644
2020-09-19 13:52:56.686 详细: [351] org.jitsi.impl.neomedia.AudioMediaStreamImpl.debug() registering format ALAW/rtp, 8000.0 Hz, 8-bit, Mono, Signed with RTP manager
2020-09-19 13:52:56.687 详细: [351] org.jitsi.impl.neomedia.AudioMediaStreamImpl.debug() registering format g722/rtp, 8000.0 Hz, Mono with RTP manager
2020-09-19 13:52:56.690 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Created SendStream with hashCode 261966565 for RawBufferDataSource with hashCode 247687644 and streamIndex 0 in RTPManager with hashCode 82368954
2020-09-19 13:52:56.691 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Total number of SendStreams in RTPManager with hashCode 82368954 is 1
2020-09-19 13:52:56.693 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Started SendStream with hashCode 261966565
2020-09-19 13:52:56.695 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Started Processor with hashCode 144214168
2020-09-19 13:52:56.700 信息: [351] org.jitsi.impl.neomedia.MediaStreamImpl.info() audio codec/freq: PCMU/8000 Hz
2020-09-19 13:52:56.703 信息: [351] org.jitsi.impl.neomedia.MediaStreamImpl.info() audio remote IP/port: 192.168.122.105/50040
2020-09-19 13:52:56.705 信息: [351] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:52:56.707 详细: [8342] net.sf.fmj.media.Log.comment() net.sf.fmj.media.BasicFilterModule@957906b: input format changed: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed
2020-09-19 13:52:56.710 较详细: [351] fmj.newInstance() Trying RTPManager class: org.jitsi.impl.neomedia.jmfext.media.rtp.RTPSessionMgr
2020-09-19 13:52:56.727 信息: [8347] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 30539
2020-09-19 13:52:56.730 较详细: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 340032654
2020-09-19 13:52:56.731 详细: [8347] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:52:56.732 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:52:56.734 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:52:56.735 信息: [351] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:52:56.736 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:52:56.738 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:52:56.739 详细: [8347] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:52:56.740 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:52:56.744 较详细: [8344] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:52:56.747 较详细: [8344] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 70965126 for ReceiveStreamPushBufferDataSource with hashCode 39635015
2020-09-19 13:52:56.750 信息: [8355] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:52:56.752 信息: [351] service.protocol.media.TransportManager.sendHolePunchPacket().530 Send NAT hole punch packets
2020-09-19 13:52:56.753 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 11 pkts, 2880 bytes.

2020-09-19 13:52:56.755 较详细: [8355] net.sf.fmj.media.Log.profile() Profile: parsing: 5 ms

2020-09-19 13:52:56.764 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 21 pkts, 9776 bytes.

2020-09-19 13:52:56.767 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 36 pkts, 1984 bytes.

2020-09-19 13:52:56.769 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:52:56.772 详细: [8357] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:52:56.774 详细: [8357] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:52:56.774 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method INVITE
2020-09-19 13:52:56.775 详细: [8357] net.sf.fmj.media.Log.comment() Input: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:52:56.776 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 59 pkts, 972 bytes.

2020-09-19 13:52:56.781 详细: [8357] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x752f19d set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:52:56.783 详细: [8357] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x752f19d set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:52:56.786 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 93 pkts, 1584 bytes.

2020-09-19 13:52:56.796 详细: [8357] net.sf.fmj.media.Log.write() 

2020-09-19 13:52:56.797 详细: [8357] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:52:56.798 详细: [8357] net.sf.fmj.media.Log.write()   net.sf.fmj.media.parser.RawPushBufferParser@5ce612
2020-09-19 13:52:56.800 详细: [8357] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@993a1e3
2020-09-19 13:52:56.801 详细: [8357] net.sf.fmj.media.Log.write()      format: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:52:56.802 详细: [8357] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@993a1e3
2020-09-19 13:52:56.804 详细: [8357] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@7c147e0
2020-09-19 13:52:56.805 详细: [8357] net.sf.fmj.media.Log.write()      format: H264
2020-09-19 13:52:56.806 详细: [8357] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@7c147e0
2020-09-19 13:52:56.809 详细: [8357] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.SwScale@8720a99
2020-09-19 13:52:56.812 详细: [8357] net.sf.fmj.media.Log.write()      format: AVFRAME, class org.jitsi.impl.neomedia.codec.video.AVFrame, pixFmt 0
2020-09-19 13:52:56.814 详细: [8357] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.SwScale@8720a99
2020-09-19 13:52:56.815 详细: [8357] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer@752f19d
2020-09-19 13:52:56.816 详细: [8357] net.sf.fmj.media.Log.write()      format: RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:52:56.818 详细: [8357] net.sf.fmj.media.Log.write() 

2020-09-19 13:52:56.819 较详细: [8357] net.sf.fmj.media.Log.profile() Profile: graph building: 46 ms

2020-09-19 13:52:56.820 较详细: [8357] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:52:56.822 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 144 pkts, 100080 bytes.

2020-09-19 13:52:56.824 较详细: [8352] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:52:56.838 较详细: [8360] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:52:56.839 较详细: [8360] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().592 Remote video added 190624443
2020-09-19 13:52:56.858 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size -1.0 : -1.0
2020-09-19 13:52:56.874 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().121 Stretch to height
2020-09-19 13:52:56.879 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().139 Remote video view width: 503.0, height: 503.0
2020-09-19 13:52:56.987 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 205 pkts, 161400 bytes.

2020-09-19 13:52:57.124 详细: [8367] net.sf.fmj.media.Log.comment() net.sf.fmj.media.BasicFilterModule@7a6f7c2: input format changed: AVFRAME, 1280x720, class org.jitsi.impl.neomedia.codec.video.AVFrame, pixFmt 0
2020-09-19 13:52:57.595 详细: [8323] net.sf.fmj.media.Log.comment() Computed latency for video: 1 ms

2020-09-19 13:52:57.701 详细: [8358] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x752f19d set to input in RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:52:57.708 详细: [8358] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x752f19d set to input in RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:52:57.710 详细: [8358] net.sf.fmj.media.Log.comment() net.sf.fmj.media.BasicRendererModule@3a0c9d3: input format changed: RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:52:57.712 较详细: [8360] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().592 Remote video added 190624443
2020-09-19 13:52:57.714 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size 1280.0 : 720.0
2020-09-19 13:52:57.752 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().121 Stretch to height
2020-09-19 13:52:57.755 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().139 Remote video view width: 894.2222222222222, height: 503.0
2020-09-19 13:52:58.838 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:23, bytes:3840, interarrival jitter:8, lost packets:0, time since previous report:32767999ms ]
2020-09-19 13:53:00.317 详细: [8302] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() AUDIO_SESSION: Other party does not support ZRTP key negotiation protocol, no secure calls possible.
2020-09-19 13:53:00.319 详细: [8302] service.protocol.AbstractCallPeer.fireCallPeerSecurityTimeoutEvent().654 Dispatching a CallPeerSecurityStatusEvent event to 2 listeners. event is: net.java.sip.communicator.service.protocol.event.CallPeerSecurityTimeoutEvent[source=45645 <45645@192.168.125.254>;status=Connected]
2020-09-19 13:53:01.141 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:1508, bytes:0 ]
2020-09-19 13:53:01.143 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:244, bytes:0, interarrival jitter:0, lost packets:0, time since previous report:2298ms ]
2020-09-19 13:53:03.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:03.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:03.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:06.571 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:06.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:06.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:07.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:07.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:07.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:19.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:19.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:19.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:21.153 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:1244, bytes:288, interarrival jitter:0, lost packets:0, time since previous report:4958ms ]
2020-09-19 13:53:21.155 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:7924, bytes:192 ]
2020-09-19 13:53:22.498 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:1206, bytes:193120, interarrival jitter:5, lost packets:0, time since previous report:1344ms ]
2020-09-19 13:53:27.874 详细: [8358] net.sf.fmj.media.Log.comment() Computed latency for video: 39 ms

2020-09-19 13:53:28.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:28.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:28.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:31.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:31.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:31.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:32.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:32.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:32.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:38.316 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:1997, bytes:319680, interarrival jitter:8, lost packets:0, time since previous report:2149ms ]
2020-09-19 13:53:41.168 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:2245, bytes:576, interarrival jitter:0, lost packets:0, time since previous report:2847ms ]
2020-09-19 13:53:41.170 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:14258, bytes:384 ]
2020-09-19 13:53:44.898 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:44.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:44.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:53.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:53.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:53.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:55.888 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:2876, bytes:460320, interarrival jitter:4, lost packets:0, time since previous report:4710ms ]
2020-09-19 13:53:56.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:56.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:56.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:53:57.006 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:53:57.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:53:57.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:01.181 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:20803, bytes:576 ]
2020-09-19 13:54:01.185 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:3246, bytes:864, interarrival jitter:0, lost packets:0, time since previous report:5287ms ]
2020-09-19 13:54:09.899 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:09.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:09.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:13.652 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:3764, bytes:602400, interarrival jitter:7, lost packets:0, time since previous report:2459ms ]
2020-09-19 13:54:18.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:18.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:18.927 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:21.199 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:27141, bytes:768 ]
2020-09-19 13:54:21.201 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:4247, bytes:1152, interarrival jitter:0, lost packets:0, time since previous report:4680ms ]
2020-09-19 13:54:21.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:21.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:21.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:22.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:22.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:22.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:29.015 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:4532, bytes:725280, interarrival jitter:5, lost packets:0, time since previous report:2812ms ]
2020-09-19 13:54:34.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:34.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:34.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:41.208 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:5247, bytes:1440, interarrival jitter:0, lost packets:0, time since previous report:551ms ]
2020-09-19 13:54:41.209 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:33579, bytes:960 ]
2020-09-19 13:54:43.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:43.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:43.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:45.648 信息: [8347] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 65535, current seq: 0
2020-09-19 13:54:45.650 详细: [8347] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:54:46.292 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:5396, bytes:863520, interarrival jitter:11, lost packets:0, time since previous report:80ms ]
2020-09-19 13:54:46.572 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:46.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:46.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:47.007 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:47.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:47.011 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:54:59.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:54:59.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:54:59.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:01.221 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:6248, bytes:1728, interarrival jitter:0, lost packets:0, time since previous report:1724ms ]
2020-09-19 13:55:01.222 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:40020, bytes:1152 ]
2020-09-19 13:55:02.459 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1091859388 [packet count:6204, bytes:992800, interarrival jitter:6, lost packets:0, time since previous report:1238ms ]
2020-09-19 13:55:08.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:08.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:08.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:11.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:11.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:11.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:12.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:12.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:12.015 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:16.259 详细: [8378] service.protocol.media.CallPeerMediaHandler.setLocalVideoTransmissionEnabled().1793 Setting local video transmission enabled: true
2020-09-19 13:55:16.297 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:16.299 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:16.300 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:16.302 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:16.303 详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:16.307 较详细: [8378] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:16.310 较详细: [8378] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:16.312 详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:16.313 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:16.315 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:16.316 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:16.317 较详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:16.319 详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:16.321 较详细: [8378] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:16.329 较详细: [8378] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:16.331 详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:16.341 详细: [8378] impl.protocol.sip.ProtocolProviderServiceSipImpl.sendInDialogRequest().2389 Sent request:
INVITE sip:45645@192.168.122.105:5064 SIP/2.0
CSeq: 2 INVITE
From: "34234" <sip:34234@192.168.125.254>;tag=f26d28cc
To: <sip:45645@192.168.125.254>;tag=1809973248
Call-ID: 2db09dc8747ab17d2cc02f4aa5401a63@::
Max-Forwards: 70
Route: <sip:192.168.125.254;lr=on;ftag=f26d28cc;nat=yes;vsf=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA--;did=965.4309ecb2>
Via: SIP/2.0/UDP 192.168.122.100:5061;branch=z9hG4bK-383730-e635bc2ae6f23d2a836dd65c0f7b8887
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>
User-Agent: Jitsi0.1.0Linux
Content-Type: application/sdp
Content-Length: 1029

v=0
o=34234-jitsi.org 0 1 IN IP4 192.168.122.100
s=-
c=IN IP4 192.168.122.100
t=0 0
m=audio 5000 RTP/AVP 96 97 98 9 100 102 0 8 103 3 104 101
a=rtpmap:96 opus/48000/2
a=fmtp:96 usedtx=1
a=rtpmap:97 SILK/24000
a=rtpmap:98 SILK/16000
a=rtpmap:9 G722/8000
a=rtpmap:100 speex/32000
a=rtpmap:102 speex/16000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:103 iLBC/8000
a=rtpmap:3 GSM/8000
a=rtpmap:104 speex/8000
a=rtpmap:101 telephone-event/8000
a=extmap:1/recvonly urn:ietf:params:rtp-hdrext:csrc-audio-level
a=rtcp-xr:voip-metrics
a=zrtp-hash:1.10 a5a81aa257f01a509d03b76c0cbf9247318b7f8891b11cd7bdbc80ea3acbe7b8
m=video 5002 RTP/AVP 105 99
a=rtpmap:105 H264/90000
a=fmtp:105 packetization-mode=1;profile-level-id=4DE01f
a=imageattr:105 send [x=[0-640],y=[0-480]] recv [x=[0-1080],y=[0-0]]
a=rtpmap:99 H264/90000
a=fmtp:99 profile-level-id=4DE01f
a=imageattr:99 send [x=[0-640],y=[0-480]] recv [x=[0-1080],y=[0-0]]
a=zrtp-hash:1.10 ae8ad02be24ce9dc25cbc3afb76f1328bd0d9f06d8f82c383142f3d19a95d08b

2020-09-19 13:55:16.351 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 100 Giving a try
2020-09-19 13:55:16.353 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:16.354 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:55:16.358 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:16.359 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:16.369 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.383 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.385 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:55:16.387 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:16.389 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:55:16.391 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:16.393 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:16.395 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.397 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.401 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:16.404 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:16.405 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:16.409 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:16.411 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:16.413 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:16.416 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:16.418 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:16.427 较详细: [351] impl.protocol.sip.sdp.SdpUtils.getCallInfoURL().1381 Call URI was null.
2020-09-19 13:55:16.439 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing audio stream for 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.440 详细: [351] service.protocol.media.MediaHandler.initStream().972 Reinitializing stream: org.jitsi.impl.neomedia.AudioMediaStreamImpl@aac0014
2020-09-19 13:55:16.445 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:55:16.446 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:55:16.448 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() AUDIO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: true, multi: 0
2020-09-19 13:55:16.458 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing video stream for 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:16.459 详细: [351] service.protocol.media.MediaHandler.initStream().972 Reinitializing stream: org.jitsi.impl.neomedia.VideoMediaStreamImpl@c72e603
2020-09-19 13:55:16.462 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:55:16.464 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:55:16.466 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing direction of stream 208856579 from:recvonly to:sendrecv
2020-09-19 13:55:16.471 信息: [351] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.info() video send resolution: 640x480
2020-09-19 13:55:16.476 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Connected CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:16.479 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:55:16.481 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:55:16.484 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:55:16.486 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:55:16.489 较详细: [351] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:55:16.493 较详细: [351] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:55:16.534 较详细: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 1665028814
2020-09-19 13:55:16.536 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:55:16.538 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:55:16.540 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:55:16.544 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:55:16.547 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:55:16.548 信息: [8307] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 4530
2020-09-19 13:55:16.549 详细: [8307] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:55:16.551 详细: [8307] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:55:16.553 较详细: [8304] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:55:16.558 较详细: [8304] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 141434821 for ReceiveStreamPushBufferDataSource with hashCode 200260890
2020-09-19 13:55:16.567 信息: [8347] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 30284
2020-09-19 13:55:16.568 较详细: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 535425465
2020-09-19 13:55:16.570 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:55:16.572 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:55:16.575 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:55:16.577 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:55:16.579 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:55:16.579 详细: [8347] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:55:16.582 信息: [8389] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:55:16.584 详细: [8347] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:55:16.586 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 11 pkts, 4962 bytes.

2020-09-19 13:55:16.591 较详细: [8344] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:55:16.606 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 21 pkts, 17520 bytes.

2020-09-19 13:55:16.608 较详细: [8389] net.sf.fmj.media.Log.profile() Profile: parsing: 11 ms

2020-09-19 13:55:16.613 较详细: [8386] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:55:16.627 较详细: [8344] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 202765121 for ReceiveStreamPushBufferDataSource with hashCode 180130022
2020-09-19 13:55:16.634 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 36 pkts, 34069 bytes.

2020-09-19 13:55:16.643 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 59 pkts, 59346 bytes.

2020-09-19 13:55:16.651 详细: [8394] impl.protocol.sip.AddressResolverImpl.resolveAddress().130 Domain 192.168.125.254:-1/UDP could not be resolved port out of range:-1
2020-09-19 13:55:16.652 较详细: [8394] impl.protocol.sip.AddressResolverImpl.resolveAddress().134 Printing SRV resolution stack trace
java.lang.IllegalArgumentException: port out of range:-1
	at java.net.InetSocketAddress.checkPort(InetSocketAddress.java:144)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:200)
	at net.java.sip.communicator.impl.protocol.sip.AddressResolverImpl.resolveAddress(AddressResolverImpl.java:88)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.processIncomingDataPacket(UDPMessageChannel.java:480)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.run(UDPMessageChannel.java:325)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:16.653 详细: [8394] impl.protocol.sip.AddressResolverImpl.resolveAddress().155 Returning hop: 192.168.125.254:5060/UDP
2020-09-19 13:55:16.656 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 93 pkts, 96712 bytes.

2020-09-19 13:55:16.662 详细: [8397] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:55:16.665 详细: [8397] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:55:16.669 详细: [8397] net.sf.fmj.media.Log.comment() Input: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:16.670 详细: [8397] net.sf.fmj.media.Log.comment() Custom options specified.
2020-09-19 13:55:16.673 详细: [8397] net.sf.fmj.media.Log.comment() A custom codec is specified: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:16.675 信息: [8396] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:55:16.677 较详细: [8396] net.sf.fmj.media.Log.profile() Profile: parsing: 3 ms

2020-09-19 13:55:16.679 详细: [8397] net.sf.fmj.media.Log.comment() A custom renderer is specified: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@230d572
2020-09-19 13:55:16.688 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 144 pkts, 152205 bytes.

2020-09-19 13:55:16.691 详细: [8397] net.sf.fmj.media.Log.write()     

2020-09-19 13:55:16.692 详细: [8397] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:55:16.693 详细: [8397] net.sf.fmj.media.Log.write()       net.sf.fmj.media.parser.RawPushBufferParser@7ffcdc3
2020-09-19 13:55:16.694 详细: [8397] net.sf.fmj.media.Log.write()          connects to: com.sun.media.codec.audio.ulaw.DePacketizer@6e3640
2020-09-19 13:55:16.695 详细: [8397] net.sf.fmj.media.Log.write()          format: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:16.696 详细: [8397] net.sf.fmj.media.Log.write()       com.sun.media.codec.audio.ulaw.DePacketizer@6e3640
2020-09-19 13:55:16.698 详细: [8397] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@8f4c979
2020-09-19 13:55:16.699 详细: [8397] net.sf.fmj.media.Log.write()          format: ULAW, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:16.700 详细: [8397] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@8f4c979
2020-09-19 13:55:16.702 详细: [8399] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:55:16.703 详细: [8399] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:55:16.714 详细: [8399] net.sf.fmj.media.Log.comment() Input: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:55:16.716 详细: [8397] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:16.718 详细: [8397] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:55:16.719 详细: [8397] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:16.720 详细: [8397] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@230d572
2020-09-19 13:55:16.721 详细: [8397] net.sf.fmj.media.Log.write()          format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:55:16.722 详细: [8397] net.sf.fmj.media.Log.write()     

2020-09-19 13:55:16.724 较详细: [8397] net.sf.fmj.media.Log.profile() Profile: graph building: 59 ms

2020-09-19 13:55:16.725 较详细: [8397] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:55:16.732 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 205 pkts, 214600 bytes.

2020-09-19 13:55:16.734 详细: [8399] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x232d6be set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:16.736 详细: [8399] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x232d6be set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:16.741 详细: [8399] net.sf.fmj.media.Log.write() 

2020-09-19 13:55:16.742 详细: [8399] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:55:16.747 详细: [8399] net.sf.fmj.media.Log.write()   net.sf.fmj.media.parser.RawPushBufferParser@207831f
2020-09-19 13:55:16.748 详细: [8399] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@20766c
2020-09-19 13:55:16.750 详细: [8399] net.sf.fmj.media.Log.write()      format: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:55:16.751 详细: [8399] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@20766c
2020-09-19 13:55:16.756 详细: [8399] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@56f8435
2020-09-19 13:55:16.757 详细: [8399] net.sf.fmj.media.Log.write()      format: H264
2020-09-19 13:55:16.759 详细: [8399] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@56f8435
2020-09-19 13:55:16.760 详细: [8399] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.SwScale@c1a0ca
2020-09-19 13:55:16.762 详细: [8399] net.sf.fmj.media.Log.write()      format: AVFRAME, class org.jitsi.impl.neomedia.codec.video.AVFrame, pixFmt 0
2020-09-19 13:55:16.763 详细: [8399] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.SwScale@c1a0ca
2020-09-19 13:55:16.765 详细: [8399] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer@232d6be
2020-09-19 13:55:16.768 详细: [8399] net.sf.fmj.media.Log.write()      format: RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:16.769 详细: [8399] net.sf.fmj.media.Log.write() 

2020-09-19 13:55:16.770 较详细: [8399] net.sf.fmj.media.Log.profile() Profile: graph building: 67 ms

2020-09-19 13:55:16.771 较详细: [8399] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:55:16.775 较详细: [8391] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:55:16.787 较详细: [8406] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:55:16.789 较详细: [8406] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().592 Remote video added 190624443
2020-09-19 13:55:16.795 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size -1.0 : -1.0
2020-09-19 13:55:16.858 信息: [8384] org.jitsi.impl.neomedia.jmfext.media.protocol.androidcamera.CameraStreamBase.startImpl().107 Camera stream format: YUV Video Format: Size = org.jitsi.android.util.java.awt.Dimension@2800000 MaxDataLength = -1 DataType = class [B yuvType = -1 StrideY = -1 StrideUV = -1 OffsetY = -1 OffsetU = -1 OffsetV = -1

2020-09-19 13:55:16.869 信息: [8384] org.jitsi.impl.neomedia.jmfext.media.protocol.androidcamera.PreviewStream.onInitPreview().88 640x480 using buffers of size: 460800 for image format: 0x32315659
2020-09-19 13:55:16.874 信息: [8384] org.jitsi.impl.neomedia.device.util.ViewDependentProvider.obtainObject().162 Waiting for object...30707032
2020-09-19 13:55:16.877 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().121 Stretch to height
2020-09-19 13:55:16.880 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().139 Remote video view width: 503.0, height: 503.0
2020-09-19 13:55:17.324 详细: [8420] impl.protocol.sip.AddressResolverImpl.resolveAddress().130 Domain 192.168.125.254:-1/UDP could not be resolved port out of range:-1
2020-09-19 13:55:17.326 较详细: [8420] impl.protocol.sip.AddressResolverImpl.resolveAddress().134 Printing SRV resolution stack trace
java.lang.IllegalArgumentException: port out of range:-1
	at java.net.InetSocketAddress.checkPort(InetSocketAddress.java:144)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:200)
	at net.java.sip.communicator.impl.protocol.sip.AddressResolverImpl.resolveAddress(AddressResolverImpl.java:88)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.processIncomingDataPacket(UDPMessageChannel.java:480)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.run(UDPMessageChannel.java:325)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:17.327 详细: [8420] impl.protocol.sip.AddressResolverImpl.resolveAddress().155 Returning hop: 192.168.125.254:5060/UDP
2020-09-19 13:55:17.537 信息: [8384] org.jitsi.impl.neomedia.device.util.ViewDependentProvider.obtainObject().169 Returning object! 30707032
2020-09-19 13:55:18.415 详细: [8422] impl.protocol.sip.AddressResolverImpl.resolveAddress().130 Domain 192.168.125.254:-1/UDP could not be resolved port out of range:-1
2020-09-19 13:55:18.416 较详细: [8422] impl.protocol.sip.AddressResolverImpl.resolveAddress().134 Printing SRV resolution stack trace
java.lang.IllegalArgumentException: port out of range:-1
	at java.net.InetSocketAddress.checkPort(InetSocketAddress.java:144)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:200)
	at net.java.sip.communicator.impl.protocol.sip.AddressResolverImpl.resolveAddress(AddressResolverImpl.java:88)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.processIncomingDataPacket(UDPMessageChannel.java:480)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.run(UDPMessageChannel.java:325)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:18.418 详细: [8422] impl.protocol.sip.AddressResolverImpl.resolveAddress().155 Returning hop: 192.168.125.254:5060/UDP
2020-09-19 13:55:18.614 较详细: [8384] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Started CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:18.616 较详细: [8384] net.sf.fmj.media.Log.profile() Profile: parsing: 2116 ms

2020-09-19 13:55:18.659 详细: [8381] net.sf.fmj.media.Log.comment() Getting the supported output formats for:
2020-09-19 13:55:18.661 详细: [8381] net.sf.fmj.media.Log.comment()   YUV Video Format: Size = org.jitsi.android.util.java.awt.Dimension@2800000 MaxDataLength = -1 DataType = class [B yuvType = -1 StrideY = -1 StrideUV = -1 OffsetY = -1 OffsetU = -1 OffsetV = -1

2020-09-19 13:55:18.695 详细: [8381] net.sf.fmj.media.Log.comment()   # of nodes visited: 28
2020-09-19 13:55:18.697 详细: [8381] net.sf.fmj.media.Log.comment()   # of formats supported: 18

2020-09-19 13:55:18.785 较详细: [8381] net.sf.fmj.media.Log.profile() Profile: getSupportedOutputFormats: 167 ms

2020-09-19 13:55:18.826 较详细: [8381] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Set format of track 0 to H264/RTP, fmtps={packetization-mode=1}
2020-09-19 13:55:18.858 详细: [8425] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:55:18.869 详细: [8425] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:55:18.878 详细: [8425] net.sf.fmj.media.Log.comment() Input: YUV Video Format: Size = org.jitsi.android.util.java.awt.Dimension@2800000 MaxDataLength = -1 DataType = class [B yuvType = -1 StrideY = -1 StrideUV = -1 OffsetY = -1 OffsetU = -1 OffsetV = -1

2020-09-19 13:55:18.890 详细: [8425] net.sf.fmj.media.Log.comment() Custom options specified.
2020-09-19 13:55:18.909 详细: [8425] net.sf.fmj.media.Log.comment() An output format is specified: H264/RTP, fmtps={packetization-mode=1}
2020-09-19 13:55:18.919 详细: [8425] net.sf.fmj.media.Log.comment() An output content type is specified: raw.rtp
2020-09-19 13:55:19.388 详细: [8425] net.sf.fmj.media.Log.write()     

2020-09-19 13:55:19.451 详细: [8425] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:55:19.452 详细: [8425] net.sf.fmj.media.Log.write()       net.sf.fmj.media.parser.RawPushBufferParser@49d720f
2020-09-19 13:55:19.454 详细: [8425] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.video.h264.JNIEncoder@664529c
2020-09-19 13:55:19.455 详细: [8425] net.sf.fmj.media.Log.write()          format: YUV Video Format: Size = org.jitsi.android.util.java.awt.Dimension@2800000 MaxDataLength = -1 DataType = class [B yuvType = -1 StrideY = -1 StrideUV = -1 OffsetY = -1 OffsetU = -1 OffsetV = -1

2020-09-19 13:55:19.458 详细: [8425] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.video.h264.JNIEncoder@664529c
2020-09-19 13:55:19.459 详细: [8425] net.sf.fmj.media.Log.write()          connects to: org.jitsi.impl.neomedia.codec.video.h264.Packetizer@a8ae4a5
2020-09-19 13:55:19.460 详细: [8425] net.sf.fmj.media.Log.write()          format: H264, 640x480, FrameRate=2.0, fmtps={packetization-mode=1}
2020-09-19 13:55:19.496 详细: [8425] net.sf.fmj.media.Log.write()       org.jitsi.impl.neomedia.codec.video.h264.Packetizer@a8ae4a5
2020-09-19 13:55:19.498 详细: [8425] net.sf.fmj.media.Log.write()          connects to: com.sun.media.multiplexer.RTPSyncBufferMux@b6bd07a
2020-09-19 13:55:19.499 详细: [8425] net.sf.fmj.media.Log.write()          format: H264/RTP, 640x480, FrameRate=2.0, fmtps={packetization-mode=1}
2020-09-19 13:55:19.501 详细: [8425] net.sf.fmj.media.Log.write()     

2020-09-19 13:55:19.505 较详细: [8425] net.sf.fmj.media.Log.profile() Profile: graph building: 637 ms

2020-09-19 13:55:19.506 较详细: [8425] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:55:19.525 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Processor with hashCode 220475439 provided RawBufferDataSource with hashCode 248061995
2020-09-19 13:55:19.529 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Created SendStream with hashCode 263322760 for RawBufferDataSource with hashCode 248061995 and streamIndex 0 in RTPManager with hashCode 48899617
2020-09-19 13:55:19.531 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Total number of SendStreams in RTPManager with hashCode 48899617 is 1
2020-09-19 13:55:19.536 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Started SendStream with hashCode 263322760
2020-09-19 13:55:19.585 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Started Processor with hashCode 220475439
2020-09-19 13:55:19.587 信息: [351] org.jitsi.impl.neomedia.MediaStreamImpl.info() video codec/freq: H264/90000 Hz
2020-09-19 13:55:19.588 信息: [351] org.jitsi.impl.neomedia.MediaStreamImpl.info() video remote IP/port: 192.168.122.105/50042
2020-09-19 13:55:19.654 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() VIDEO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: false, multi: 0
2020-09-19 13:55:19.748 信息: [351] service.protocol.media.CallPeerMediaHandler.start().1963 Starting
2020-09-19 13:55:19.836 较详细: [351] impl.protocol.sip.SipStackSharing.processRequest().705 received request: INFO
2020-09-19 13:55:19.837 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1171 service was found in dialog data
2020-09-19 13:55:19.838 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processRequest().1183 Found 2 processor(s) for method INFO
2020-09-19 13:55:19.851 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:19.867 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:19.872 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:19.900 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:19.934 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a udp listening point
2020-09-19 13:55:19.964 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:19.965 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:19.966 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:19.978 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:20.018 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:20.031 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:20.101 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:20.155 详细: [8434] impl.protocol.sip.AddressResolverImpl.resolveAddress().130 Domain 192.168.125.254:-1/UDP could not be resolved port out of range:-1
2020-09-19 13:55:20.167 较详细: [8434] impl.protocol.sip.AddressResolverImpl.resolveAddress().134 Printing SRV resolution stack trace
java.lang.IllegalArgumentException: port out of range:-1
	at java.net.InetSocketAddress.checkPort(InetSocketAddress.java:144)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:200)
	at net.java.sip.communicator.impl.protocol.sip.AddressResolverImpl.resolveAddress(AddressResolverImpl.java:88)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.processIncomingDataPacket(UDPMessageChannel.java:480)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.run(UDPMessageChannel.java:325)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:20.169 详细: [8434] impl.protocol.sip.AddressResolverImpl.resolveAddress().155 Returning hop: 192.168.125.254:5060/UDP
2020-09-19 13:55:20.196 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:20.198 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method INVITE
2020-09-19 13:55:21.452 信息: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for video stream SSRC:304533298 [packet count:1320, bytes:0 ]
2020-09-19 13:55:21.498 信息: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:Received a sender report for audio stream SSRC:57417387 [packet count:247, bytes:0, interarrival jitter:0, lost packets:0, time since previous report:0ms ]
2020-09-19 13:55:21.532 信息: [8310] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for audio stream SSRC:1665028814 [packet count:7156, bytes:1145120, interarrival jitter:150, lost packets:0, time since previous report:76ms ]
2020-09-19 13:55:22.775 详细: [8400] net.sf.fmj.media.Log.comment() Computed latency for video: 1 ms

2020-09-19 13:55:24.610 信息: [8351] org.jitsi.impl.neomedia.transform.rtcp.StatisticsEngine.info() rtpstat:Sending a report for video stream SSRC:535425465 [packet count:4294967295, bytes:0, interarrival jitter:195, lost packets:69, time since previous report:3161ms ]
2020-09-19 13:55:24.616 信息: [8344] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:24.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:24.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:24.906 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:26.450 信息: [8304] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:26.454 信息: [8332] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:26.463 信息: [8304] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:26.735 信息: [8367] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:26.740 信息: [8344] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:26.747 较详细: [8344] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:26.750 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:26.751 较详细: [8435] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().597 Remote video removed 190624443
2020-09-19 13:55:26.830 详细: [8437] impl.protocol.sip.AddressResolverImpl.resolveAddress().130 Domain 192.168.125.254:-1/UDP could not be resolved port out of range:-1
2020-09-19 13:55:26.831 较详细: [8437] impl.protocol.sip.AddressResolverImpl.resolveAddress().134 Printing SRV resolution stack trace
java.lang.IllegalArgumentException: port out of range:-1
	at java.net.InetSocketAddress.checkPort(InetSocketAddress.java:144)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:200)
	at net.java.sip.communicator.impl.protocol.sip.AddressResolverImpl.resolveAddress(AddressResolverImpl.java:88)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.processIncomingDataPacket(UDPMessageChannel.java:480)
	at android.gov.nist.javax.sip.stack.UDPMessageChannel.run(UDPMessageChannel.java:325)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:26.833 详细: [8437] impl.protocol.sip.AddressResolverImpl.resolveAddress().155 Returning hop: 192.168.125.254:5060/UDP
2020-09-19 13:55:26.836 较详细: [351] impl.protocol.sip.SipStackSharing.processRequest().705 received request: INFO
2020-09-19 13:55:26.837 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1171 service was found in dialog data
2020-09-19 13:55:26.844 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processRequest().1183 Found 2 processor(s) for method INFO
2020-09-19 13:55:26.845 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:26.854 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:26.855 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:26.856 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:26.869 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a udp listening point
2020-09-19 13:55:26.870 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:26.875 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:26.877 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:26.880 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:26.882 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:26.886 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:26.888 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:27.125 详细: [8433] net.sf.fmj.media.Log.comment() Computed latency for video: 0 ms

2020-09-19 13:55:27.189 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size -1.0 : -1.0
2020-09-19 13:55:27.258 详细: [8441] service.protocol.media.CallPeerMediaHandler.setLocalVideoTransmissionEnabled().1793 Setting local video transmission enabled: false
2020-09-19 13:55:27.329 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:27.331 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:27.334 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:27.335 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:27.336 详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:27.337 较详细: [8441] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:27.349 较详细: [8441] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:27.350 详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:27.352 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:27.354 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:27.356 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:27.358 较详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:27.359 详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:27.364 较详细: [8441] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:27.367 较详细: [8441] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:27.370 详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:27.388 详细: [8441] impl.protocol.sip.ProtocolProviderServiceSipImpl.sendInDialogRequest().2389 Sent request:
INVITE sip:45645@192.168.122.105:5064 SIP/2.0
CSeq: 3 INVITE
From: "34234" <sip:34234@192.168.125.254>;tag=f26d28cc
To: <sip:45645@192.168.125.254>;tag=1809973248
Call-ID: 2db09dc8747ab17d2cc02f4aa5401a63@::
Max-Forwards: 70
Route: <sip:192.168.125.254;lr=on;ftag=f26d28cc;nat=yes;vsf=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA--;did=965.4309ecb2>
Via: SIP/2.0/UDP 192.168.122.100:5061;branch=z9hG4bK-383730-29d785cff75bc16fd26f6261750099a5
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>
User-Agent: Jitsi0.1.0Linux
Content-Type: application/sdp
Content-Length: 1001

v=0
o=34234-jitsi.org 0 2 IN IP4 192.168.122.100
s=-
c=IN IP4 192.168.122.100
t=0 0
m=audio 5000 RTP/AVP 96 97 98 9 100 102 0 8 103 3 104 101
a=rtpmap:96 opus/48000/2
a=fmtp:96 usedtx=1
a=rtpmap:97 SILK/24000
a=rtpmap:98 SILK/16000
a=rtpmap:9 G722/8000
a=rtpmap:100 speex/32000
a=rtpmap:102 speex/16000
a=rtpmap:0 PCMU/8000
a=rtpmap:8 PCMA/8000
a=rtpmap:103 iLBC/8000
a=rtpmap:3 GSM/8000
a=rtpmap:104 speex/8000
a=rtpmap:101 telephone-event/8000
a=extmap:1/recvonly urn:ietf:params:rtp-hdrext:csrc-audio-level
a=rtcp-xr:voip-metrics
a=zrtp-hash:1.10 a5a81aa257f01a509d03b76c0cbf9247318b7f8891b11cd7bdbc80ea3acbe7b8
m=video 5002 RTP/AVP 105 99
a=recvonly
a=rtpmap:105 H264/90000
a=fmtp:105 packetization-mode=1;profile-level-id=4DE01f
a=imageattr:105 send * recv [x=[0-1080],y=[0-0]]
a=rtpmap:99 H264/90000
a=fmtp:99 profile-level-id=4DE01f
a=imageattr:99 send * recv [x=[0-1080],y=[0-0]]
a=zrtp-hash:1.10 ae8ad02be24ce9dc25cbc3afb76f1328bd0d9f06d8f82c383142f3d19a95d08b

2020-09-19 13:55:27.440 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 100 Giving a try
2020-09-19 13:55:27.450 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:27.452 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:55:27.453 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:27.454 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:27.485 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.487 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.488 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:55:27.489 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:27.490 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method INVITE
2020-09-19 13:55:27.518 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().120 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1 among 1 calls
2020-09-19 13:55:27.519 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().430 Looking for peer with dialog: android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1among 1 calls
2020-09-19 13:55:27.520 较详细: [351] impl.protocol.sip.CallSipImpl.findCallPeer().438 Returning cp=45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.522 较详细: [351] impl.protocol.sip.ActiveCallsRepositorySipImpl.findCallPeer().133 Returning peer 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.535 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:27.538 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:27.552 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:27.555 较详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:27.556 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:27.570 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:27.589 较详细: [351] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:27.599 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:27.614 信息: [8307] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 28632
2020-09-19 13:55:27.615 较详细: [8304] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 1461316874
2020-09-19 13:55:27.616 详细: [8307] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:55:27.618 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:55:27.619 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:55:27.621 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:55:27.623 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:55:27.625 较详细: [8304] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:55:27.632 详细: [8307] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:55:27.635 较详细: [8304] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:55:27.642 较详细: [8304] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 267384018 for ReceiveStreamPushBufferDataSource with hashCode 36661667
2020-09-19 13:55:27.646 较详细: [8344] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Received new ReceiveStream with ssrc 409601178
2020-09-19 13:55:27.648 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.raw.Handler
2020-09-19 13:55:27.650 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.sun.media.processor.raw.Handler
2020-09-19 13:55:27.653 信息: [8347] net.sf.fmj.media.Log.info() Resetting queue, last seq added: 9223372036854775806, current seq: 13641
2020-09-19 13:55:27.655 详细: [8347] net.sf.fmj.media.Log.comment() Resetting the RTP packet queue
2020-09-19 13:55:27.661 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: com.ibm.media.processor.raw.Handler
2020-09-19 13:55:27.663 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: net.sf.fmj.media.processor.raw.Handler
2020-09-19 13:55:27.665 较详细: [8344] fmj.createProcessor() createProcessor: java.lang.ClassNotFoundException: javax.media.processor.unknown.Handler
2020-09-19 13:55:27.667 详细: [8347] net.sf.fmj.media.Log.comment() RTP socket receive buffer size: -1 bytes.

2020-09-19 13:55:27.669 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 11 pkts, 4902 bytes.

2020-09-19 13:55:27.671 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 21 pkts, 17296 bytes.

2020-09-19 13:55:27.686 信息: [8451] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:55:27.701 较详细: [351] impl.protocol.sip.sdp.SdpUtils.getCallInfoURL().1381 Call URI was null.
2020-09-19 13:55:27.715 较详细: [8344] net.sf.fmj.media.Log.profile() Profile: instantiation: 0 ms

2020-09-19 13:55:27.718 较详细: [8451] net.sf.fmj.media.Log.profile() Profile: parsing: 28 ms

2020-09-19 13:55:27.719 较详细: [8344] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Created Player with hashCode 146050078 for ReceiveStreamPushBufferDataSource with hashCode 80018687
2020-09-19 13:55:27.722 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 36 pkts, 33635 bytes.

2020-09-19 13:55:27.729 较详细: [8446] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:55:27.752 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 59 pkts, 58590 bytes.

2020-09-19 13:55:27.754 信息: [8455] net.sf.fmj.media.Log.info() Starting RTPSourceStream.
2020-09-19 13:55:27.759 较详细: [8455] net.sf.fmj.media.Log.profile() Profile: parsing: 5 ms

2020-09-19 13:55:27.761 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 93 pkts, 95480 bytes.

2020-09-19 13:55:27.767 详细: [8456] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:55:27.776 详细: [8456] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:55:27.779 详细: [8456] net.sf.fmj.media.Log.comment() Input: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:27.781 详细: [8456] net.sf.fmj.media.Log.comment() Custom options specified.
2020-09-19 13:55:27.785 详细: [8456] net.sf.fmj.media.Log.comment() A custom codec is specified: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:27.787 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing audio stream for 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.791 详细: [351] service.protocol.media.MediaHandler.initStream().972 Reinitializing stream: org.jitsi.impl.neomedia.AudioMediaStreamImpl@aac0014
2020-09-19 13:55:27.794 详细: [8456] net.sf.fmj.media.Log.comment() A custom renderer is specified: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@374115
2020-09-19 13:55:27.812 详细: [8458] net.sf.fmj.media.Log.comment() Building flow graph for: null

2020-09-19 13:55:27.814 详细: [8458] net.sf.fmj.media.Log.comment() Building Track: 0
2020-09-19 13:55:27.816 详细: [8458] net.sf.fmj.media.Log.comment() Input: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:55:27.818 详细: [8456] net.sf.fmj.media.Log.write()     

2020-09-19 13:55:27.819 详细: [8456] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:55:27.820 详细: [8456] net.sf.fmj.media.Log.write()               net.sf.fmj.media.parser.RawPushBufferParser@8994c2a
2020-09-19 13:55:27.821 详细: [8456] net.sf.fmj.media.Log.write()          connects to: com.sun.media.codec.audio.ulaw.DePacketizer@f66a1b
2020-09-19 13:55:27.823 详细: [8456] net.sf.fmj.media.Log.write()          format: ULAW/rtp, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:27.824 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 144 pkts, 148730 bytes.

2020-09-19 13:55:27.826 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:55:27.828 详细: [8456] net.sf.fmj.media.Log.write()                   com.sun.media.codec.audio.ulaw.DePacketizer@f66a1b
2020-09-19 13:55:27.829 详细: [8458] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x92197b8 set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:27.830 详细: [8456] net.sf.fmj.media.Log.write()                      connects to: org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@fd7d991
2020-09-19 13:55:27.831 详细: [8456] net.sf.fmj.media.Log.write()                      format: ULAW, 8000.0 Hz, 8-bit, Mono
2020-09-19 13:55:27.832 详细: [8456] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.audio.ulaw.JavaDecoder@fd7d991
2020-09-19 13:55:27.833 详细: [8458] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x92197b8 set to input in RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:27.834 详细: [8456] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:27.835 详细: [8456] net.sf.fmj.media.Log.write()      format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:55:27.836 详细: [8456] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.audiolevel.AudioLevelEffect@20a8f1
2020-09-19 13:55:27.837 详细: [8456] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer@374115
2020-09-19 13:55:27.839 详细: [8456] net.sf.fmj.media.Log.write()      format: LINEAR, 8000.0 Hz, 16-bit, Mono, LittleEndian, Signed, FrameSize=16 bits
2020-09-19 13:55:27.840 详细: [8456] net.sf.fmj.media.Log.write() 

2020-09-19 13:55:27.841 较详细: [8456] net.sf.fmj.media.Log.profile() Profile: graph building: 65 ms

2020-09-19 13:55:27.842 较详细: [8456] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:55:27.877 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:55:27.880 详细: [8458] net.sf.fmj.media.Log.write() 

2020-09-19 13:55:27.881 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() AUDIO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: true, multi: 0
2020-09-19 13:55:27.885 详细: [8458] net.sf.fmj.media.Log.comment() Here's the completed flow graph:
2020-09-19 13:55:27.887 详细: [8458] net.sf.fmj.media.Log.write()   net.sf.fmj.media.parser.RawPushBufferParser@a5800f6
2020-09-19 13:55:27.888 详细: [8458] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@c078cf7
2020-09-19 13:55:27.889 详细: [8458] net.sf.fmj.media.Log.write()      format: H264/RTP, fmtps={profile-level-id=4DE01f,packetization-mode=1}
2020-09-19 13:55:27.891 详细: [8458] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.DePacketizer@c078cf7
2020-09-19 13:55:27.892 详细: [8458] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@a347764
2020-09-19 13:55:27.894 详细: [8347] net.sf.fmj.media.Log.comment() RTP video buffer size: 205 pkts, 216800 bytes.

2020-09-19 13:55:27.900 详细: [8458] net.sf.fmj.media.Log.write()      format: H264
2020-09-19 13:55:27.901 详细: [8458] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.h264.JNIDecoder@a347764
2020-09-19 13:55:27.902 详细: [8458] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.codec.video.SwScale@f7dcd
2020-09-19 13:55:27.904 详细: [8458] net.sf.fmj.media.Log.write()      format: AVFRAME, class org.jitsi.impl.neomedia.codec.video.AVFrame, pixFmt 0
2020-09-19 13:55:27.905 详细: [8458] net.sf.fmj.media.Log.write()   org.jitsi.impl.neomedia.codec.video.SwScale@f7dcd
2020-09-19 13:55:27.906 详细: [8458] net.sf.fmj.media.Log.write()      connects to: org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer@92197b8
2020-09-19 13:55:27.907 详细: [8458] net.sf.fmj.media.Log.write()      format: RGB, 32-bit, Masks=255:65280:16711680, LineStride=-1, class [I
2020-09-19 13:55:27.908 详细: [8458] net.sf.fmj.media.Log.write() 

2020-09-19 13:55:27.913 较详细: [8458] net.sf.fmj.media.Log.profile() Profile: graph building: 100 ms

2020-09-19 13:55:27.914 较详细: [8458] net.sf.fmj.media.Log.profile() Profile: realize, post graph building: 0 ms

2020-09-19 13:55:27.917 较详细: [8450] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:55:27.930 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_ADDED and origin REMOTE
2020-09-19 13:55:27.931 较详细: [8435] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().592 Remote video added 190624443
2020-09-19 13:55:27.952 详细: [351] service.protocol.media.CallPeerMediaHandler.initStream().1193 Initializing video stream for 45645 <45645@192.168.125.254>;status=Connected
2020-09-19 13:55:27.953 详细: [351] service.protocol.media.MediaHandler.initStream().972 Reinitializing stream: org.jitsi.impl.neomedia.VideoMediaStreamImpl@c72e603
2020-09-19 13:55:27.962 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1026 Dynamic PT map: 96=rtpmap:-1 opus/48000/2 fmtp:usedtx=1; 102=rtpmap:-1 speex/16000; 100=rtpmap:-1 speex/32000; 104=rtpmap:-1 speex/8000; 99=rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f; 105=rtpmap:-1 H264/90000 fmtp:packetization-mode=1;profile-level-id=4DE01f; 101=rtpmap:-1 telephone-event/8000; 103=rtpmap:-1 iLBC/8000; 97=rtpmap:-1 SILK/24000; 98=rtpmap:-1 SILK/16000; 
2020-09-19 13:55:27.977 信息: [351] service.protocol.media.MediaHandler.registerDynamicPTsWithStream().1043 PT overrides []
2020-09-19 13:55:27.982 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Changing direction of stream 208856579 from:sendrecv to:recvonly
2020-09-19 13:55:28.015 较详细: [351] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping send stream with hashcode 263322760
2020-09-19 13:55:28.113 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:28.114 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:28.134 信息: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().629 Remote video size -1.0 : -1.0
2020-09-19 13:55:28.149 详细: [8478] service.protocol.media.CallPeerMediaHandler.setLocalVideoTransmissionEnabled().1793 Setting local video transmission enabled: true
2020-09-19 13:55:28.179 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:28.189 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:28.197 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().121 Stretch to height
2020-09-19 13:55:28.229 详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:28.247 较详细: [8480] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:28.250 较详细: [8480] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:28.251 详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:28.336 信息: [1] org.jitsi.android.gui.call.RemoteVideoLayout.onMeasure().139 Remote video view width: 503.0, height: 503.0
2020-09-19 13:55:28.355 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:28.360 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:28.361 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:28.418 较详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:28.486 详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:28.497 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Stopped CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:28.502 较详细: [351] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 220475439
2020-09-19 13:55:28.507 详细: [351] org.jitsi.impl.neomedia.transform.zrtp.SecurityEventManager.debug() VIDEO_SESSION: ZRTP message: severity: Info, sub code: ZRTPEnabledByDefault, DH session: false, multi: 0
2020-09-19 13:55:28.509 信息: [351] service.protocol.media.CallPeerMediaHandler.start().1963 Starting
2020-09-19 13:55:28.556 较详细: [8480] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:28.560 较详细: [8480] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:28.562 详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:28.659 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:28.680 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method INVITE
2020-09-19 13:55:28.779 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:28.780 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:28.781 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:28.782 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:28.869 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:28.870 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:28.871 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:28.872 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:28.874 详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:28.926 较详细: [8478] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:28.928 详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:28.953 详细: [8480] impl.protocol.sip.ProtocolProviderServiceSipImpl.sendInDialogRequest().2389 Sent request:
BYE sip:45645@192.168.122.105:5064 SIP/2.0
CSeq: 4 BYE
From: "34234" <sip:34234@192.168.125.254>;tag=f26d28cc
To: <sip:45645@192.168.125.254>;tag=1809973248
Call-ID: 2db09dc8747ab17d2cc02f4aa5401a63@::
Max-Forwards: 70
Route: <sip:192.168.125.254;lr=on;ftag=f26d28cc;nat=yes;vsf=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA--;did=965.4309ecb2>
Via: SIP/2.0/UDP 192.168.122.100:5061;branch=z9hG4bK-383730-364fe0f6e238d0c85117320c4c2d7dda
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>
User-Agent: Jitsi0.1.0Linux
Content-Length: 0


2020-09-19 13:55:29.021 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().389 Dispatching a CallPeerChangeEvent event to 6 listeners. event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:29.024 较详细: [8478] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:29.055 较详细: [8477] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:29.058 较详细: [8477] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:29.059 详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:29.060 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:29.071 详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:29.073 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.CallSipImpl . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:29.117 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:55:29.120 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:29.121 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:29.173 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:29.174 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method BYE
2020-09-19 13:55:29.176 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:29.181 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:29.186 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:29.187 较详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:29.231 详细: [8480] service.protocol.Call.fireCallPeerEvent().251 Dispatching a CallPeer event to 7 listeners. The event is: CallPeerEvent: ID=2 source peer=45645 <45645@192.168.125.254>;status=Disconnected source call=Call: id=16004947729751021300 peers=0
2020-09-19 13:55:29.235 详细: [8480] service.protocol.Call.fireCallChangeEvent().334 Dispatching a CallChange event to 7 listeners. The event is: CallChangeEvent: type=CallState oldV=net.java.sip.communicator.service.protocol.CallState:In Progress newV=net.java.sip.communicator.service.protocol.CallState:Ended
2020-09-19 13:55:29.236 较详细: [8480] service.protocol.ActiveCallsRepository.callStateChanged().94 Removing call Call: id=16004947729751021300 peers=0 from the list of active calls because it entered an ENDED state
2020-09-19 13:55:29.238 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().199 Dispatching a CallEvent to 5 listeners. The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.286 较详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:29.287 详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:29.288 较详细: [8477] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:29.290 详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.122.105
2020-09-19 13:55:29.299 较详细: [8477] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:29.301 较详细: [8478] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:29.306 较详细: [8478] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:29.353 详细: [8477] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:29.356 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.service.protocol.SingleCallInProgressPolicy$SingleCallInProgressPolicyListener . The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.370 较详细: [8480] service.protocol.SingleCallInProgressPolicy.handleCallEvent().274 Call event fired.
2020-09-19 13:55:29.372 较详细: [8480] service.protocol.SingleCallInProgressPolicy.removeCallListener().477 Remove call change listener.
2020-09-19 13:55:29.373 较详细: [8480] service.protocol.SingleCallInProgressPolicy.run().773 On the phone status policy run.
2020-09-19 13:55:29.391 详细: [8478] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:29.467 严重: [8477] util.UtilActivator.uncaughtException().140 An uncaught exception occurred in thread=Thread[Thread-7944,5,main] and message was: Attempt to invoke virtual method 'boolean net.java.sip.communicator.service.protocol.media.MediaAwareCall.isConferenceFocus()' on a null object reference
java.lang.NullPointerException: Attempt to invoke virtual method 'boolean net.java.sip.communicator.service.protocol.media.MediaAwareCall.isConferenceFocus()' on a null object reference
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.reflectConferenceFocus(CallPeerSipImpl.java:1568)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.processExtraHeaders(CallPeerSipImpl.java:1542)
	at net.java.sip.communicator.impl.protocol.sip.CallSipImpl$1.processExtraHeaders(CallSipImpl.java:260)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.sendReInvite(CallPeerSipImpl.java:1465)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.sendReInvite(CallPeerSipImpl.java:1436)
	at net.java.sip.communicator.impl.protocol.sip.CallSipImpl.reInvite(CallSipImpl.java:725)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetVideoTelephonySipImpl.setLocalVideoAllowed(OperationSetVideoTelephonySipImpl.java:109)
	at net.java.sip.communicator.util.call.CallManager$EnableLocalVideoThread.run(CallManager.java:578)
2020-09-19 13:55:29.471 严重: [8478] util.UtilActivator.uncaughtException().140 An uncaught exception occurred in thread=Thread[Thread-7945,5,main] and message was: Attempt to invoke virtual method 'boolean net.java.sip.communicator.service.protocol.media.MediaAwareCall.isConferenceFocus()' on a null object reference
java.lang.NullPointerException: Attempt to invoke virtual method 'boolean net.java.sip.communicator.service.protocol.media.MediaAwareCall.isConferenceFocus()' on a null object reference
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.reflectConferenceFocus(CallPeerSipImpl.java:1568)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.processExtraHeaders(CallPeerSipImpl.java:1542)
	at net.java.sip.communicator.impl.protocol.sip.CallSipImpl$1.processExtraHeaders(CallSipImpl.java:260)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.sendReInvite(CallPeerSipImpl.java:1465)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.sendReInvite(CallPeerSipImpl.java:1436)
	at net.java.sip.communicator.impl.protocol.sip.CallSipImpl.reInvite(CallSipImpl.java:725)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetVideoTelephonySipImpl.setLocalVideoAllowed(OperationSetVideoTelephonySipImpl.java:109)
	at net.java.sip.communicator.util.call.CallManager$EnableLocalVideoThread.run(CallManager.java:578)
2020-09-19 13:55:29.501 较详细: [8480] service.protocol.SingleCallInProgressPolicy.run().782 On the phone status is not enabled.
2020-09-19 13:55:29.520 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.554 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl . The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.569 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class org.jitsi.android.gui.call.AndroidCallListener . The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.598 较详细: [8486] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:55:29.665 详细: [8480] org.jitsi.android.gui.call.AndroidCallListener.restoreSpeakerPhoneStatus().167 Restoring speakerphone to: false
2020-09-19 13:55:29.666 详细: [8480] service.protocol.media.AbstractOperationSetBasicTelephony.fireCallEvent().209 Dispatching a CallEvent to class net.java.sip.communicator.impl.protocol.sip.OperationSetTelephonyConferencingSipImpl . The event is: CallEvent:[ id=3 Call=Call: id=16004947729751021300 peers=0]
2020-09-19 13:55:29.668 较详细: [8480] service.protocol.SingleCallInProgressPolicy.callStateChanged().194 Call state changed.
2020-09-19 13:55:29.669 较详细: [8480] service.protocol.SingleCallInProgressPolicy.callStateChanged().595 Call state changed.[2]
2020-09-19 13:55:29.726 较详细: [8480] service.protocol.SingleCallInProgressPolicy.run().773 On the phone status policy run.
2020-09-19 13:55:29.761 较详细: [8480] service.protocol.SingleCallInProgressPolicy.run().782 On the phone status is not enabled.
2020-09-19 13:55:30.056 非常详细: [8480] impl.history.HistoryImpl.<init>().68 [entry] <init>
2020-09-19 13:55:30.157 非常详细: [8480] impl.history.HistoryImpl.<init>().86 [exit] <init>
2020-09-19 13:55:31.199 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.plugin.notificationwiring.NotificationManager . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.220 较详细: [8486] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.<init>().200 Created stream for stream: 0
2020-09-19 13:55:31.222 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.callhistory.CallHistoryServiceImpl$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.236 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.service.protocol.media.AbstractOperationSetTelephonyConferencing$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.237 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.util.call.CallPeerAdapter . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.239 详细: [8480] service.protocol.AbstractCallPeer.fireCallPeerChangeEvent().405 Dispatching a CallPeerChangeEvent event to class net.java.sip.communicator.impl.protocol.sip.OperationSetTelephonyConferencingSipImpl$1 . event is: CallPeerChangeEvent: type=CallPeerStatusChange oldV=net.java.sip.communicator.service.protocol.CallPeerState:Connected newV=net.java.sip.communicator.service.protocol.CallPeerState:Disconnected for peer=45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.241 警告: [8486] org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.open().434 AudioTrack.setStereoVolume(float, float) failed with return value -3
2020-09-19 13:55:31.246 详细: [8480] service.protocol.media.CallPeerMediaHandler.closeStream().475 Closing audio stream for 45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.248 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() 
Receive stream stats: discarded RTP packets: 60
Receive stream stats: decoded with FEC: 0
2020-09-19 13:55:31.250 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping send stream with hashcode 261966565
2020-09-19 13:55:31.252 严重: [8486] util.UtilActivator.uncaughtException().140 An uncaught exception occurred in thread=Thread[pool-3-thread-2,5,main] and message was: stop() called on uninitialized AudioTrack.
java.lang.IllegalStateException: stop() called on uninitialized AudioTrack.
	at android.media.AudioTrack.stop(AudioTrack.java:1762)
	at org.jitsi.impl.neomedia.jmfext.media.renderer.audio.AudioTrackRenderer.stop(AudioTrackRenderer.java:870)
	at org.jitsi.impl.neomedia.notify.AudioSystemClipImpl.exitRunOnceInPlayThread(AudioSystemClipImpl.java:111)
	at org.jitsi.service.audionotifier.AbstractSCAudioClip.runInPlayThread(AbstractSCAudioClip.java:375)
	at org.jitsi.service.audionotifier.AbstractSCAudioClip.access$100(AbstractSCAudioClip.java:20)
	at org.jitsi.service.audionotifier.AbstractSCAudioClip$1.run(AbstractSCAudioClip.java:299)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
	at java.lang.Thread.run(Thread.java:761)
2020-09-19 13:55:31.365 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 144214168
2020-09-19 13:55:31.367 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping receive stream with hashcode 42745803
2020-09-19 13:55:31.368 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.371 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping receive stream with hashcode 53031848
2020-09-19 13:55:31.372 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.374 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 144214168
2020-09-19 13:55:31.376 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping send stream with hashcode 261966565
2020-09-19 13:55:31.423 详细: [8459] net.sf.fmj.media.Log.comment() Computed latency for video: 39 ms

2020-09-19 13:55:31.449 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:call stats for outgoing audio stream SSRC:57417387
rtpstat:bytes sent: 1222880
rtpstat:RTP sent: 7643
rtpstat:remote reported min interarrival jitter : 0
rtpstat:remote reported max interarrival jitter : 0
rtpstat:local collisions: 0
rtpstat:remote collisions: 0
rtpstat:RTCP sent: 35
rtpstat:transmit failed: 0
2020-09-19 13:55:31.452 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:call stats for incoming rtpmap:0 PCMU/8000 stream SSRC:1461316874
rtpstat:packets received: 7679
rtpstat:bytes received: 1313348
rtpstat:packets lost: 0
rtpstat:min interarrival jitter : 2
rtpstat:max interarrival jitter : 150
rtpstat:RTCPs received: 60
rtpstat:bad RTCP packets: 0
rtpstat:bad RTP packets: 30
rtpstat:local collisions: 0
rtpstat:malformed BYEs: 0
rtpstat:malformed RRs: 0
rtpstat:malformed SDESs: 0
rtpstat:malformed SRs: 0
rtpstat:packets looped: 0
rtpstat:remote collisions: 0
rtpstat:SRRs received: 30
rtpstat:transmit failed: 0
rtpstat:unknown types: 30
2020-09-19 13:55:31.454 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 7006
2020-09-19 13:55:31.455 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 1
2020-09-19 13:55:31.457 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.459 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 88
2020-09-19 13:55:31.460 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.462 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.463 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.465 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 0
2020-09-19 13:55:31.467 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 4
2020-09-19 13:55:31.469 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.470 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.475 详细: [8480] org.jitsi.impl.neomedia.RTPConnectorOutputStream.debug() Write called without targets!
java.lang.Throwable
	at org.jitsi.impl.neomedia.RTPConnectorOutputStream.write(RTPConnectorOutputStream.java:362)
	at net.sf.fmj.media.rtp.util.RTPPacketSender.sendTo(RTPPacketSender.java:61)
	at net.sf.fmj.media.rtp.util.PacketFilter.sendTo(PacketFilter.java:122)
	at net.sf.fmj.media.rtp.RTCPTransmitter.transmit(RTCPTransmitter.java:233)
	at net.sf.fmj.media.rtp.RTCPTransmitter.bye(RTCPTransmitter.java:75)
	at net.sf.fmj.media.rtp.RTCPTransmitter.bye(RTCPTransmitter.java:82)
	at net.sf.fmj.media.rtp.RTCPReporter.releasessrc(RTCPReporter.java:45)
	at net.sf.fmj.media.rtp.RTCPReporter.close(RTCPReporter.java:39)
	at net.sf.fmj.media.rtp.RTPSessionMgr.stopParticipating(RTPSessionMgr.java:2743)
	at net.sf.fmj.media.rtp.RTPSessionMgr.dispose(RTPSessionMgr.java:987)
	at org.jitsi.impl.neomedia.StreamRTPManager.dispose(StreamRTPManager.java:118)
	at org.jitsi.impl.neomedia.MediaStreamImpl.close(MediaStreamImpl.java:605)
	at org.jitsi.impl.neomedia.AudioMediaStreamImpl.close(AudioMediaStreamImpl.java:268)
	at net.java.sip.communicator.service.protocol.media.MediaHandler.setAudioStream(MediaHandler.java:1277)
	at net.java.sip.communicator.service.protocol.media.MediaHandler.closeStream(MediaHandler.java:663)
	at net.java.sip.communicator.service.protocol.media.CallPeerMediaHandler.closeStream(CallPeerMediaHandler.java:500)
	at net.java.sip.communicator.service.protocol.media.CallPeerMediaHandler.close(CallPeerMediaHandler.java:454)
	at net.java.sip.communicator.service.protocol.media.MediaAwareCallPeer.setState(MediaAwareCallPeer.java:1068)
	at net.java.sip.communicator.service.protocol.AbstractCallPeer.setState(AbstractCallPeer.java:931)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.setDisconnectedState(CallPeerSipImpl.java:1723)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.hangup(CallPeerSipImpl.java:1037)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetBasicTelephonySipImpl.hangupCallPeer(OperationSetBasicTelephonySipImpl.java:1977)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetBasicTelephonySipImpl.hangupCallPeer(OperationSetBasicTelephonySipImpl.java:1955)
	at net.java.sip.communicator.util.call.CallManager$HangupCallThread.run(CallManager.java:183)
2020-09-19 13:55:31.478 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 67
2020-09-19 13:55:31.479 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 1
2020-09-19 13:55:31.481 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.482 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 60
2020-09-19 13:55:31.484 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.485 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.487 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.488 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 0
2020-09-19 13:55:31.490 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 4
2020-09-19 13:55:31.492 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.493 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.496 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 546
2020-09-19 13:55:31.497 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 1
2020-09-19 13:55:31.498 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.500 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 105
2020-09-19 13:55:31.501 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.503 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.504 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.506 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 0
2020-09-19 13:55:31.507 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 4
2020-09-19 13:55:31.509 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.511 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.519 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 144214168
2020-09-19 13:55:31.524 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.526 信息: [8419] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.530 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.534 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.537 信息: [8479] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.541 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.544 详细: [8480] service.protocol.media.CallPeerMediaHandler.closeStream().475 Closing video stream for 45645 <45645@192.168.125.254>;status=Disconnected
2020-09-19 13:55:31.547 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() 
Receive stream stats: discarded RTP packets: 183
Receive stream stats: decoded with FEC: 0
2020-09-19 13:55:31.548 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping receive stream with hashcode 45212244
2020-09-19 13:55:31.550 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.552 较详细: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.trace() Stopping receive stream with hashcode 162211325
2020-09-19 13:55:31.554 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.556 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 220475439
2020-09-19 13:55:31.558 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.560 较详细: [8480] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.562 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.564 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.566 较详细: [8480] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.568 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.569 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:call stats for outgoing video stream SSRC:304533298
rtpstat:bytes sent: 4309
rtpstat:RTP sent: 9
rtpstat:remote reported min interarrival jitter : -1
rtpstat:remote reported max interarrival jitter : 0
rtpstat:local collisions: 0
rtpstat:remote collisions: 0
rtpstat:RTCP sent: 3
rtpstat:transmit failed: 0
2020-09-19 13:55:31.571 信息: [8480] org.jitsi.impl.neomedia.MediaStreamImpl.info() rtpstat:call stats for incoming rtpmap:-1 H264/90000 fmtp:profile-level-id=4DE01f;packetization-mode=1 stream SSRC:409601178
rtpstat:packets received: 48208
rtpstat:bytes received: 41279557
rtpstat:packets lost: 0
rtpstat:min interarrival jitter : 184
rtpstat:max interarrival jitter : 684
rtpstat:RTCPs received: 93
rtpstat:bad RTCP packets: 0
rtpstat:bad RTP packets: 30
rtpstat:local collisions: 0
rtpstat:malformed BYEs: 0
rtpstat:malformed RRs: 0
rtpstat:malformed SDESs: 0
rtpstat:malformed SRs: 0
rtpstat:packets looped: 0
rtpstat:remote collisions: 0
rtpstat:SRRs received: 30
rtpstat:transmit failed: 0
rtpstat:unknown types: 30
2020-09-19 13:55:31.573 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 44868
2020-09-19 13:55:31.574 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 2
2020-09-19 13:55:31.576 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.577 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 30763
2020-09-19 13:55:31.579 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.580 详细: [8418] net.sf.fmj.media.Log.comment() net.sf.fmj.media.BasicFilterModule@22072f2: input format changed: AVFRAME, 1280x720, class org.jitsi.impl.neomedia.codec.video.AVFrame, pixFmt 0
2020-09-19 13:55:31.582 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.584 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.585 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 200
2020-09-19 13:55:31.587 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 205
2020-09-19 13:55:31.588 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.590 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.592 详细: [8480] org.jitsi.impl.neomedia.RTPConnectorOutputStream.debug() Write called without targets!
java.lang.Throwable
	at org.jitsi.impl.neomedia.RTPConnectorOutputStream.write(RTPConnectorOutputStream.java:362)
	at net.sf.fmj.media.rtp.util.RTPPacketSender.sendTo(RTPPacketSender.java:61)
	at net.sf.fmj.media.rtp.util.PacketFilter.sendTo(PacketFilter.java:122)
	at net.sf.fmj.media.rtp.RTCPTransmitter.transmit(RTCPTransmitter.java:233)
	at net.sf.fmj.media.rtp.RTCPTransmitter.bye(RTCPTransmitter.java:75)
	at net.sf.fmj.media.rtp.RTCPTransmitter.bye(RTCPTransmitter.java:82)
	at net.sf.fmj.media.rtp.RTCPReporter.releasessrc(RTCPReporter.java:45)
	at net.sf.fmj.media.rtp.RTCPReporter.close(RTCPReporter.java:39)
	at net.sf.fmj.media.rtp.RTPSessionMgr.stopParticipating(RTPSessionMgr.java:2743)
	at net.sf.fmj.media.rtp.RTPSessionMgr.dispose(RTPSessionMgr.java:987)
	at org.jitsi.impl.neomedia.StreamRTPManager.dispose(StreamRTPManager.java:118)
	at org.jitsi.impl.neomedia.MediaStreamImpl.close(MediaStreamImpl.java:605)
	at net.java.sip.communicator.service.protocol.media.MediaHandler.setVideoStream(MediaHandler.java:1499)
	at net.java.sip.communicator.service.protocol.media.MediaHandler.closeStream(MediaHandler.java:666)
	at net.java.sip.communicator.service.protocol.media.CallPeerMediaHandler.closeStream(CallPeerMediaHandler.java:500)
	at net.java.sip.communicator.service.protocol.media.CallPeerMediaHandler.close(CallPeerMediaHandler.java:455)
	at net.java.sip.communicator.service.protocol.media.MediaAwareCallPeer.setState(MediaAwareCallPeer.java:1068)
	at net.java.sip.communicator.service.protocol.AbstractCallPeer.setState(AbstractCallPeer.java:931)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.setDisconnectedState(CallPeerSipImpl.java:1723)
	at net.java.sip.communicator.impl.protocol.sip.CallPeerSipImpl.hangup(CallPeerSipImpl.java:1037)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetBasicTelephonySipImpl.hangupCallPeer(OperationSetBasicTelephonySipImpl.java:1977)
	at net.java.sip.communicator.impl.protocol.sip.OperationSetBasicTelephonySipImpl.hangupCallPeer(OperationSetBasicTelephonySipImpl.java:1955)
	at net.java.sip.communicator.util.call.CallManager$HangupCallThread.run(CallManager.java:183)
2020-09-19 13:55:31.596 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 389
2020-09-19 13:55:31.597 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 1
2020-09-19 13:55:31.598 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.600 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 183
2020-09-19 13:55:31.601 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.603 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.604 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.606 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 0
2020-09-19 13:55:31.607 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 205
2020-09-19 13:55:31.609 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.610 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.612 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Total packets added: 2858
2020-09-19 13:55:31.613 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times reset() called: 1
2020-09-19 13:55:31.615 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Times grow() called: 0
2020-09-19 13:55:31.617 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because full: 2485
2020-09-19 13:55:31.618 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped while shrinking: 0
2020-09-19 13:55:31.620 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late: 0
2020-09-19 13:55:31.621 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped because they were late by more than MAX_SIZE: 0
2020-09-19 13:55:31.623 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Packets dropped in reset(): 0
2020-09-19 13:55:31.624 详细: [8403] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x232d6be set to input in RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:55:31.625 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Max size reached: 205
2020-09-19 13:55:31.627 信息: [8480] net.sf.fmj.media.Log.info() net.sf.fmj.media.rtp.RTPSourceStream Adaptive jitter buffer mode was enabled
2020-09-19 13:55:31.628 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.629 详细: [8403] org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer.debug() org.jitsi.impl.neomedia.jmfext.media.renderer.video.JAWTRenderer 0x232d6be set to input in RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:55:31.633 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Stopped CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.637 详细: [8403] net.sf.fmj.media.Log.comment() net.sf.fmj.media.BasicRendererModule@974cfc0: input format changed: RGB, 1280x720, 32-bit, Masks=255:65280:16711680, LineStride=1280, class [I
2020-09-19 13:55:31.638 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Disconnected CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.640 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceSession.trace() Stopped Processor with hashCode 220475439
2020-09-19 13:55:31.652 较详细: [8433] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Stopped CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.656 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Stopped CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.658 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Disconnected CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.661 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Stopped CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.663 较详细: [8480] org.jitsi.impl.neomedia.device.MediaDeviceImpl.trace() Disconnected CaptureDevice with hashCode 129879049 and captureDeviceInfo androidcamera:0/1
2020-09-19 13:55:31.666 信息: [8418] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.669 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.676 较详细: [8480] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.678 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.678 信息: [8475] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.680 信息: [8480] net.sf.fmj.media.Log.info() Stopping RTPSourceStream.
2020-09-19 13:55:31.684 较详细: [8480] org.jitsi.impl.neomedia.device.VideoMediaDeviceSession.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.686 较详细: [8435] org.jitsi.impl.neomedia.VideoMediaStreamImpl.trace() Firing VideoEvent with type VIDEO_REMOVED and origin REMOTE
2020-09-19 13:55:31.686 较详细: [8480] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().597 Remote video removed 190624443
2020-09-19 13:55:31.688 较详细: [8480] org.jitsi.android.gui.call.VideoHandlerFragment.handleRemoteVideoEvent().597 Remote video removed 190624443
2020-09-19 13:55:31.689 警告: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().614 Remote video event when getActivity() returned null
2020-09-19 13:55:31.690 警告: [1] org.jitsi.android.gui.call.VideoHandlerFragment.run().614 Remote video event when getActivity() returned null
2020-09-19 13:55:33.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:33.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:33.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:34.117 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:34.118 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method BYE
2020-09-19 13:55:36.573 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:36.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:36.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:36.910 较详细: [351] impl.protocol.sip.SipStackSharing.processDialogTerminated().654 service was found with dialog data
2020-09-19 13:55:36.911 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processDialogTerminated().1053 Dialog terminated for req=android.gov.nist.javax.sip.stack.SIPDialog@1cfd58e1
2020-09-19 13:55:37.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:37.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:37.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:49.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:49.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:49.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:51.962 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:51.964 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:51.965 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:51.966 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:51.967 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:51.968 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:51.971 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:51.972 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:51.973 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:51.974 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:51.976 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:51.977 较详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:51.978 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:51.979 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:51.981 较详细: [369] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:51.983 详细: [369] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:51.984 详细: [369] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 6c74d2f656f52097eaaf39386871a466@::
CSeq: 336 REGISTER
From: "33675" <sip:33675@192.168.125.254>;tag=a40d80e6
To: "33675" <sip:33675@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "33675" <sip:33675@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:55:51.997 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:55:51.998 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:52.000 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:55:52.002 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:52.003 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:52.004 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:52.006 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:52.007 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:52.008 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:52.011 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:52.012 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:55:52.013 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:55:52.015 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:52.016 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:55:52.017 较详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:55:52.018 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 192.168.125.254/192.168.125.254:5060 for destination 192.168.125.254
2020-09-19 13:55:52.019 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '192.168.125.254/192.168.125.254'
2020-09-19 13:55:52.021 较详细: [370] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:55:52.023 详细: [370] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>

2020-09-19 13:55:52.025 详细: [370] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:192.168.125.254 SIP/2.0
Call-ID: 78efd9c20e7acfeea460f8acf6ccd959@::
CSeq: 336 REGISTER
From: "34234" <sip:34234@192.168.125.254>;tag=734fa9ab
To: "34234" <sip:34234@192.168.125.254>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
User-Agent: Jitsi0.1.0Linux
Expires: 600
Contact: "34234" <sip:34234@192.168.122.100:5061;transport=udp;registering_acc=192_168_125_254>;expires=600
Content-Length: 0


2020-09-19 13:55:52.037 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:55:52.038 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:52.039 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:55:52.113 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1171 service was found in dialog data
2020-09-19 13:55:52.114 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 2 processor(s) for method INFO
2020-09-19 13:55:56.998 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:56.999 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:55:57.037 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:55:57.038 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:55:58.892 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1171 service was found in dialog data
2020-09-19 13:55:58.893 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 2 processor(s) for method INFO
2020-09-19 13:55:58.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:55:58.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:55:58.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:01.574 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:01.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:01.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:02.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:02.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:02.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:14.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:14.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:14.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:19.669 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:56:19.686 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.Jitsi@4f51d2
2020-09-19 13:56:19.705 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.Jitsi@4f51d2
2020-09-19 13:56:19.710 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:56:19.712 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:56:19.714 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:56:19.715 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:56:23.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:23.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:23.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:26.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:26.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:26.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:27.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:27.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:27.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:39.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:39.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:39.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:45.209 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:56:45.215 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().192 Current chat id: null
2020-09-19 13:56:45.217 详细: [1] org.jitsi.android.gui.chat.ChatSessionManager.setCurrentChatId().203 Chat for id: null no longer exists
2020-09-19 13:56:45.254 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() org.jitsi.android.show_icon( oldValue=true, newValue=true.
2020-09-19 13:56:45.277 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:45.295 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() org.jitsi.impl.neomedia.android.hw_encode( oldValue=false, newValue=false.
2020-09-19 13:56:45.317 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:45.325 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() org.jitsi.impl.neomedia.android.surface_encode( oldValue=false, newValue=false.
2020-09-19 13:56:45.352 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:45.360 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() org.jitsi.impl.neomedia.android.hw_decode( oldValue=false, newValue=false.
2020-09-19 13:56:45.382 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:45.391 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() org.jitsi.impl.neomedia.android.surface_decode( oldValue=false, newValue=false.
2020-09-19 13:56:45.413 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:45.439 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.history_logging
2020-09-19 13:56:45.440 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.show_history
2020-09-19 13:56:45.443 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.typing_notifications
2020-09-19 13:56:45.446 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.smiley_replacement
2020-09-19 13:56:45.451 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.remove.special
2020-09-19 13:56:45.459 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.convert.letters
2020-09-19 13:56:45.479 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.SettingsActivity@78ad6ca
2020-09-19 13:56:48.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:48.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:48.927 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:51.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:51.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:51.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:51.587 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:56:51.637 较详细: [8504] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.BACKUP_RESOLVER_ENABLED( oldValue=true, newValue=true.
2020-09-19 13:56:51.640 较详细: [8505] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.BACKUP_RESOLVER( oldValue=backup-resolver.jitsi.net, newValue=backup-resolver.jitsi.net.
2020-09-19 13:56:51.643 较详细: [8506] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.BACKUP_RESOLVER_FALLBACK_IP( oldValue=8.8.8.8, newValue=8.8.8.8.
2020-09-19 13:56:51.647 较详细: [8507] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.BACKUP_RESOLVER_PORT( oldValue=53, newValue=53.
2020-09-19 13:56:51.649 较详细: [8508] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.DNS_PATIENCE( oldValue=1500, newValue=1500.
2020-09-19 13:56:51.653 较详细: [8509] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.DNS_REDEMPTION( oldValue=3, newValue=3.
2020-09-19 13:56:51.654 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.DNSSEC_ALWAYS_ABSOLUTE( oldValue=false, newValue=false.
2020-09-19 13:56:51.742 详细: [8504] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.755 详细: [8505] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.768 详细: [8506] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.782 详细: [8507] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.794 详细: [8508] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.806 详细: [8509] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.819 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.826 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.DNSSEC_ENABLED( oldValue=false, newValue=false.
2020-09-19 13:56:51.882 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.893 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.util.dns.DNSSEC_VALIDATION_MODE( oldValue=WarnIfBogus, newValue=WarnIfBogus.
2020-09-19 13:56:51.914 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:56:51.929 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.DnsSettings@9693f4a
2020-09-19 13:56:52.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:56:52.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:56:52.011 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:56:58.336 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:56:58.348 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.history_logging
2020-09-19 13:56:58.350 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.show_history
2020-09-19 13:56:58.352 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.typing_notifications
2020-09-19 13:56:58.355 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.smiley_replacement
2020-09-19 13:56:58.360 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.remove.special
2020-09-19 13:56:58.361 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.convert.letters
2020-09-19 13:56:58.376 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.SettingsActivity@78ad6ca
2020-09-19 13:57:01.505 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:57:01.577 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.BasicSettingsActivity@4ede3b8
2020-09-19 13:57:03.831 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:57:03.843 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.history_logging
2020-09-19 13:57:03.844 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.show_history
2020-09-19 13:57:03.847 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.typing_notifications
2020-09-19 13:57:03.850 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.msg.smiley_replacement
2020-09-19 13:57:03.854 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.remove.special
2020-09-19 13:57:03.856 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.call.convert.letters
2020-09-19 13:57:03.870 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.SettingsActivity@78ad6ca
2020-09-19 13:57:04.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:04.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:04.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:09.269 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to null
2020-09-19 13:57:09.318 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.logging.enable
2020-09-19 13:57:09.320 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.logging.sip
2020-09-19 13:57:09.321 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.logging.xmpp
2020-09-19 13:57:09.323 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.logging.rtp
2020-09-19 13:57:09.324 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setCheckboxVal().50 Setting true on pref.key.logging.ice4j
2020-09-19 13:57:09.326 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setEditTextVal().70 Setting 3 on pref.key.logging.file_count
2020-09-19 13:57:09.328 详细: [1] org.jitsi.android.gui.util.PreferenceUtil.setEditTextVal().70 Setting 5000 on pref.key.logging.limit
2020-09-19 13:57:09.336 信息: [1] org.jitsi.android.JitsiApplication.setCurrentActivity().353 Current activity set to org.jitsi.android.gui.settings.LoggingSettings@c35ada1
2020-09-19 13:57:13.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:13.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:13.927 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:16.575 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:16.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:16.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:17.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:17.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:17.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:29.900 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:29.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:29.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:33.800 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.packetlogging.PACKET_LOGGING_ENABLED( oldValue=null, newValue=false.
2020-09-19 13:57:33.829 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:57:36.064 较详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.trace() net.java.sip.communicator.packetlogging.PACKET_LOGGING_ENABLED( oldValue=false, newValue=true.
2020-09-19 13:57:36.093 详细: [1] org.jitsi.impl.configuration.ConfigurationServiceImpl.debug() Created an empty file in $HOME: /data/user/0/org.jitsi/files/sip-communicator.xml
2020-09-19 13:57:38.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:38.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:38.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:41.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:41.579 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:41.580 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:42.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:42.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:42.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:57:54.901 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:57:54.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:57:54.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:03.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:03.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:03.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:06.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:06.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:06.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:07.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:07.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:07.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:19.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:19.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:19.904 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:28.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:28.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:28.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:31.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:31.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:31.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:32.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:32.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:32.011 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:44.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:44.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:44.904 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:49.309 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:58:49.310 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:49.311 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:49.313 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:58:49.314 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:58:49.315 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:58:49.318 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:58:49.319 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getLocalViaHeaders().1414 generated via headers:Via: SIP/2.0/UDP 192.168.122.100:5061

2020-09-19 13:58:49.320 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a null listening point
2020-09-19 13:58:49.321 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:49.322 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:49.324 较详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2641 Will use proxy address
2020-09-19 13:58:49.325 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getIntendedDestination().2678 Returning address 221.176.60.69/221.176.60.69:5060 for destination ims.ge.chinamobile.com
2020-09-19 13:58:49.326 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().137 Querying for a localhost address for intended destination '221.176.60.69/221.176.60.69'
2020-09-19 13:58:49.328 较详细: [431] impl.netaddr.NetworkAddressManagerServiceImpl.getLocalHost().289 Returning the localhost address '/192.168.122.100'
2020-09-19 13:58:49.330 详细: [431] impl.protocol.sip.ProtocolProviderServiceSipImpl.getContactHeader().1573 generated contactHeader:Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>

2020-09-19 13:58:49.332 详细: [431] impl.protocol.sip.SipRegistrarConnection.register().342 register request = REGISTER sip:ims.ge.chinamobile.com SIP/2.0
Call-ID: ebc1883b029430209c55a1e270cb7bbb@::
CSeq: 671 REGISTER
From: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>;tag=3edaf38
To: "+867598204021" <sip:+867598204021@ims.ge.chinamobile.com>
Via: SIP/2.0/UDP 192.168.122.100:5061
Max-Forwards: 70
Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="NnaEwPPKMTMl5UoK9BKbgA==",uri="sip:ims.ge.chinamobile.com",response="e3bc4e156b6097549f8f7b00f3652245",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001
User-Agent: Jitsi0.1.0Linux
Route: <sip:221.176.60.69:5060;lr>
Expires: 600
Contact: "+867598204021" <sip:+867598204021@192.168.122.100:5061;transport=udp;registering_acc=ims_ge_chinamobile_com>;expires=600
Content-Length: 0


2020-09-19 13:58:49.503 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 401 Unauthorized
2020-09-19 13:58:49.504 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:58:49.505 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:58:49.506 详细: [351] impl.protocol.sip.SipRegistrarConnection.processAuthenticationChallenge().1022 Authenticating a Register request.
2020-09-19 13:58:49.518 较详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().313 We seem to have a pass in the cache. Let's try with it.
2020-09-19 13:58:49.519 详细: [351] impl.protocol.sip.security.MessageDigestAlgorithm.calculateResponse().74 trying to authenticate using : MD5, 867598204021@ims.ge.chinamobile.com, ims.ge.chinamobile.com, true, HbO6PnDOIe7HUKBj4Trxcg==, 00000001, xyz, REGISTER, sip:ims.ge.chinamobile.com, , auth
2020-09-19 13:58:49.521 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().354 Created authorization header: Authorization: Digest username="867598204021@ims.ge.chinamobile.com",realm="ims.ge.chinamobile.com",nonce="HbO6PnDOIe7HUKBj4Trxcg==",uri="sip:ims.ge.chinamobile.com",response="e0bce560bcfd228fa5a678c6d7d4bce6",algorithm=MD5,qop=auth,cnonce="xyz",nc=00000001

2020-09-19 13:58:49.522 详细: [351] impl.protocol.sip.security.SipSecurityManager.handleChallenge().372 Returning authorization transaction.
2020-09-19 13:58:49.664 较详细: [351] impl.protocol.sip.SipStackSharing.processResponse().814 received response: 200 OK
2020-09-19 13:58:49.665 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:58:49.666 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processResponse().921 Found 1 processor(s) for method REGISTER
2020-09-19 13:58:53.924 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:53.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:53.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:54.503 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:58:54.504 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:58:54.664 较详细: [351] impl.protocol.sip.SipStackSharing.getServiceData().1161 service was found in request data
2020-09-19 13:58:54.665 详细: [351] impl.protocol.sip.ProtocolProviderServiceSipImpl.processTransactionTerminated().1024 Found 1 processor(s) for method REGISTER
2020-09-19 13:58:56.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:56.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:56.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:58:57.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:58:57.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:58:57.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:09.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:09.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:09.904 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:18.925 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:18.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:18.927 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:21.576 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:21.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:21.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:22.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:22.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:22.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:34.902 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:34.903 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:34.904 较详细: [1235] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:43.926 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:43.927 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:43.928 较详细: [452] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:46.577 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:46.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:46.578 较详细: [378] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
2020-09-19 13:59:47.008 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1703 Query for a UDP listening point
2020-09-19 13:59:47.009 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1709 Will use proxy address
2020-09-19 13:59:47.010 较详细: [388] impl.protocol.sip.ProtocolProviderServiceSipImpl.getListeningPoint().1735 Returning LP android.gov.nist.javax.sip.ListeningPointImpl@358fa68 for transport [UDP] and 
